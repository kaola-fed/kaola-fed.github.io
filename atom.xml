<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>网易考拉前端Team</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-06-17T15:34:16.343Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>前端团队</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何进行组件化开发</title>
    <link href="http://yoursite.com/2016/06/17/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2016/06/17/如何进行组件化开发/</id>
    <published>2016-06-17T15:33:53.497Z</published>
    <updated>2016-06-17T15:34:16.343Z</updated>
    
    <content type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;前段时间因为iphone 5s的摄像头坏了，但因为摄像头坏了换手机又比较可惜，无意间网上查找，5s摄像头坏掉是通病，淘宝上也因为5s的摄像头坏掉有专门的一门生意，卖新摄像头及拆机工具，所以也立马下了一单，到手后开始拆机，很惊讶，这样的一个小物件，里面的组件化做得这么好，摄像头，电池，屏幕，指纹都是一个个组件，往主板插上就可以使用。对于这么小的一个物件，居然有这么好的组件化，我们的生活中到处有组件的使用，对于码农来说，组件更是必不可少，也是码农升华的必经之路。&lt;/p&gt;
&lt;h2 id=&quot;思考&quot;&gt;&lt;a href=&quot;#思考&quot; class=&quot;headerlink&quot; title=&quot;思考&quot;&gt;&lt;/a&gt;思考&lt;/h2&gt;&lt;p&gt;万物都是一样的表现呈现在世人面前，但每个人的解读都会有所不同，这是什么原因造成的呢？直接的影响应该是对同一件事件的认知不同，因为学习环境，知识积累的不同，同样的一个事物对每个人的认知都会有所偏差。 认知其实是经过的分析后得出的结论，无论你承不承认自己有没有经过分析，已经造成了不同的认识了。在这一节里，我想指出的是，无论什么样的一个事物，都要经过主动的分析，不要让大脑无意识的分析，主动分析的结果，会动用现在的知识体系，去分析事物表层下的一些关系。至于分析的结论正确与否，但至少我们已经有一个主动分析的意识在里面，后面就要是丰富自己的知识体系，提高和扩大自己的认识面，通过不停的学习，增加知识，积累知识，通过学习丰富知识体系，相信最后的结果是能得到一个相对正确的分析结果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表层现象&lt;br&gt;&lt;img src=&quot;https://georgemdallas.files.wordpress.com/2013/10/pca3.jpg?w=646&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在张图，粗略一个是一堆三角形围成一圈坐在一起&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分析方法引入&lt;br&gt;&lt;img src=&quot;https://georgemdallas.files.wordpress.com/2013/10/pca9.jpg?w=646&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;引入水平距离的分析方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://georgemdallas.files.wordpress.com/2013/10/pca8.jpg?w=646&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;引入垂直距离的分析方法&lt;/p&gt;
&lt;h3 id=&quot;上面的两个分析方法的引入，可以相对正解的得出第二种分析方法更能说明问题，但对于没有一定的知识积累，因为没有分析方法的引入，只能做粗略的分析，这里想强调的是分析方法是通过知识积累和经验积累所生产的，在有意识的分析前提下，需要不停的摄取知识和经验，产生不同的生析方法，最后才会越来越接近本质。&quot;&gt;&lt;a href=&quot;#上面的两个分析方法的引入，可以相对正解的得出第二种分析方法更能说明问题，但对于没有一定的知识积累，因为没有分析方法的引入，只能做粗略的分析，这里想强调的是分析方法是通过知识积累和经验积累所生产的，在有意识的分析前提下，需要不停的摄取知识和经验，产生不同的生析方法，最后才会越来越接近本质。&quot; class=&quot;headerlink&quot; title=&quot;上面的两个分析方法的引入，可以相对正解的得出第二种分析方法更能说明问题，但对于没有一定的知识积累，因为没有分析方法的引入，只能做粗略的分析，这里想强调的是分析方法是通过知识积累和经验积累所生产的，在有意识的分析前提下，需要不停的摄取知识和经验，产生不同的生析方法，最后才会越来越接近本质。&quot;&gt;&lt;/a&gt;上面的两个分析方法的引入，可以相对正解的得出第二种分析方法更能说明问题，但对于没有一定的知识积累，因为没有分析方法的引入，只能做粗略的分析，这里想强调的是分析方法是通过知识积累和经验积累所生产的，在有意识的分析前提下，需要不停的摄取知识和经验，产生不同的生析方法，最后才会越来越接近本质。&lt;/h3&gt;&lt;h2 id=&quot;页面组件开发&quot;&gt;&lt;a href=&quot;#页面组件开发&quot; class=&quot;headerlink&quot; title=&quot;页面组件开发&quot;&gt;&lt;/a&gt;页面组件开发&lt;/h2&gt;&lt;p&gt;对于前端开发，如果进行组件化开发呢，还是从分析开始。&lt;br&gt;对于这样的一个效果图，我们能用什么样的分析方法来拆分组件呢？&lt;br&gt;&lt;img src=&quot;http://haitao.nos.netease.com/13716b2554de42f3a92384dc7ef3e718.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由大到小的拆分组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的效果图，可以看出整个页面分为上面两部分，上部分是通栏的中型模块1，下部是居中的中型模块2。从大模块开始拆分模块。&lt;br&gt;&lt;img src=&quot;http://haitao.nos.netease.com/c964402a705e4d02bc98cd5b45a66d8a.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拆分中型模块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中型模块1，可以拆成一个居中的次中型模块3，在次中型模块3中，有logo模块4，登录模块5，下载模块6，可以从上面的分析看出中型模块3和中型模块2是两个大小相同的居中模块，可以应用同一组样式进行大小和居中的控制。&lt;br&gt;登录模块5分为左右两个模块，左边是广告图片，右边是一个tab切换的登录方式的切换，注意右上角有个小图标，也是用来切换登录方式，这样的拆份以后，上部通栏的组件都已经被拆卸出来，也基本可以照着拆卸的组件进行开发了。 下部居中的模块大的拆份是左右两栏固定宽度的布局，每左边模块是一条一条的微博，右边是一个一个的特色模块，左边微博模块还可以拆得更细，这里不做再细的拆分。右边的特色模块的拆分，外部都是标题+内容区域，这个模块的主框架，然后通过模块的扩展，再把丰富模块的表现形式，从页面上看，微博频道、热特微博才是这么模块最应该有的方式，热门话题反而是扩展出来的模块，完成自有的样式。&lt;br&gt;&lt;img src=&quot;http://haitao.nos.netease.com/95661c529d25422d876cdae0d8ea3533.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拆分小模块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;拆模块，最终要能拆到不可拆为止，但太小的粒度也不利于组件的使用，所以这是一个对立面，拆到模块不能拆，也是太绝对的一个事，拆到一个认为可以独立完成一个功能，或是能提供一个独立功能，拆到这种呈度基本也可以了。所以上面的两种登录方式的模块还是有必要拆出模块来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注重细点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把页面上的每一个点都扫描到，不要漏掉细节，细节处理到位了，会让一个工作成为点精之作。&lt;/p&gt;
&lt;h3 id=&quot;从大到小拆分模块，把模块拆分到能提供独立功能为止。把页面想象成各种组件组合起来，就像5s一样，通过插口把组件布在页面上，组件可以脱离于页面本身独立，组件不要依赖于布局样式，在使用时根据容器节点放置组件即可。&quot;&gt;&lt;a href=&quot;#从大到小拆分模块，把模块拆分到能提供独立功能为止。把页面想象成各种组件组合起来，就像5s一样，通过插口把组件布在页面上，组件可以脱离于页面本身独立，组件不要依赖于布局样式，在使用时根据容器节点放置组件即可。&quot; class=&quot;headerlink&quot; title=&quot;从大到小拆分模块，把模块拆分到能提供独立功能为止。把页面想象成各种组件组合起来，就像5s一样，通过插口把组件布在页面上，组件可以脱离于页面本身独立，组件不要依赖于布局样式，在使用时根据容器节点放置组件即可。&quot;&gt;&lt;/a&gt;从大到小拆分模块，把模块拆分到能提供独立功能为止。把页面想象成各种组件组合起来，就像5s一样，通过插口把组件布在页面上，组件可以脱离于页面本身独立，组件不要依赖于布局样式，在使用时根据容器节点放置组件即可。&lt;/h3&gt;&lt;h2 id=&quot;js的组件开发&quot;&gt;&lt;a href=&quot;#js的组件开发&quot; class=&quot;headerlink&quot; title=&quot;js的组件开发&quot;&gt;&lt;/a&gt;js的组件开发&lt;/h2&gt;&lt;p&gt;一个组件有哪些特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不依赖于外部的属性和方法，自己的方法和属性也不能让外部调用，但在js里是没有强限制让外部不进行调用，在代码规范要需要区分出，哪些方法是可以外部调用，哪些方法不能让外部调，如果外部调了，可能导致组件不能正常工作。封装性还有一个表现是如何进行参数定义，一个组件让用户使用需要有好的参数说明和定义，且支持默认参数的默认值，以及组件和外部的消息通信。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扩展性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何去扩展一个组件，在开发中用到的最多的是继承，还可以用组合，在继承上可以用虚函数（空函数），把对象的接口预留起来，让子类具体实现接口。在最初设计组件时，应该不会太考虑接口预留的问题。能做好尽量的解耦组件已经是一个很成功的组件了。用组合的方式可以横向的扩展组件，使组件拥有更多的功能，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件通信 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在组件开始工作后，需要和外部进行事件通信，以使外部获取组件内的工作状态，同事更新组件使用者的状态。&lt;/p&gt;
&lt;h3 id=&quot;综上述js组件开发，抽象组件的功能，定义组件的参数，定义组件的通信事件，以及有一套面向对象的体系支持组件的扩展。&quot;&gt;&lt;a href=&quot;#综上述js组件开发，抽象组件的功能，定义组件的参数，定义组件的通信事件，以及有一套面向对象的体系支持组件的扩展。&quot; class=&quot;headerlink&quot; title=&quot;综上述js组件开发，抽象组件的功能，定义组件的参数，定义组件的通信事件，以及有一套面向对象的体系支持组件的扩展。&quot;&gt;&lt;/a&gt;综上述js组件开发，抽象组件的功能，定义组件的参数，定义组件的通信事件，以及有一套面向对象的体系支持组件的扩展。&lt;/h3&gt;&lt;h3 id=&quot;再次调强养成主动分析的意识，重视学习的重要性，为了能得出正确的分析结果，不断的学习，把学到的知识进行创新的应用，使自己在分析问题更全面，得到的结论更接近于事物&quot;&gt;&lt;a href=&quot;#再次调强养成主动分析的意识，重视学习的重要性，为了能得出正确的分析结果，不断的学习，把学到的知识进行创新的应用，使自己在分析问题更全面，得到的结论更接近于事物&quot; class=&quot;headerlink&quot; title=&quot;再次调强养成主动分析的意识，重视学习的重要性，为了能得出正确的分析结果，不断的学习，把学到的知识进行创新的应用，使自己在分析问题更全面，得到的结论更接近于事物&quot;&gt;&lt;/a&gt;再次调强养成主动分析的意识，重视学习的重要性，为了能得出正确的分析结果，不断的学习，把学到的知识进行创新的应用，使自己在分析问题更全面，得到的结论更接近于事物&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;前段时间因为iphone 5s的摄像头坏了，但因为摄像头坏了换手机又比较可惜，无意间网上查找，5s摄像头坏掉是通病，淘宝上也因为5s的摄像头
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>如何发表文章</title>
    <link href="http://yoursite.com/2016/06/17/%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2016/06/17/如何发布文章/</id>
    <published>2016-06-17T15:19:50.598Z</published>
    <updated>2016-06-17T15:19:50.601Z</updated>
    
    <content type="html">&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;安装&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;clone &lt;code&gt;kaola-fed/kaola-fed.github.io&lt;/code&gt;到本地&lt;a href=&quot;https://github.com/kaola-fed/kaola-fed.github.io.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/kaola-fed/kaola-fed.github.io.git&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;开始发布&quot;&gt;&lt;a href=&quot;#开始发布&quot; class=&quot;headerlink&quot; title=&quot;开始发布&quot;&gt;&lt;/a&gt;开始发布&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在code目录下， 首先执行npm install安装依赖module，执行&lt;code&gt;hexo new 文章名称&lt;/code&gt;，新建一篇文章；&lt;/li&gt;
&lt;li&gt;在source/_post目录下，找到新建的文件，编辑好文章后，执行&lt;code&gt;hexo server&lt;/code&gt;，运行本地博客服务，这时候可以打开&lt;code&gt;http://localhost:4000&lt;/code&gt;就可以看到新增的内容了；&lt;/li&gt;
&lt;li&gt;确认编辑好后，执行hexo generate生成静态文件，把生成的public下的静态文件拷贝到最外层文件中， 提交所有更改到master分支；&lt;/li&gt;
&lt;li&gt;等待一段时间，wercker自动部署好后， 就可以在&lt;code&gt;http://kaola-fed.github.io&lt;/code&gt;看到更新了；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Refs&quot;&gt;&lt;a href=&quot;#Refs&quot; class=&quot;headerlink&quot; title=&quot;Refs:&quot;&gt;&lt;/a&gt;Refs:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wsgzao.github.io/post/hexo-guide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用GitHub + Hexo搭建博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;安装&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>impress.js 调研报告</title>
    <link href="http://yoursite.com/2016/06/17/impress.js%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2016/06/17/impress.js调研报告/</id>
    <published>2016-06-17T15:19:50.588Z</published>
    <updated>2016-06-17T15:19:50.598Z</updated>
    
    <content type="html">&lt;p&gt;在开始阅读本文之前，你至少应该打开官网的&lt;a href=&quot;http://impress.github.io/impress.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;例子&lt;/a&gt;看看，并且&lt;a href=&quot;https://github.com/stefina/impressJS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载代码&lt;/a&gt;到本地跑跑 :-)&lt;/p&gt;
&lt;p&gt;在阅读过程中，强烈建议阅读的同时不断查看源码，不断对照官网提供的&lt;a href=&quot;http://impress.github.io/impress.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;例子&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、命名&quot;&gt;&lt;a href=&quot;#一、命名&quot; class=&quot;headerlink&quot; title=&quot;一、命名&quot;&gt;&lt;/a&gt;一、命名&lt;/h2&gt;&lt;p&gt;根据页面结构：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;body &lt;span class=&quot;comment&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#impress --&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;.step&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了方便理解，我们约定：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;文中简称&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;对应节点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;「PPT」&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;&amp;lt;div id=impress\&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;「Page」&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;step&amp;quot;\&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;二、什么是-amp-相关项目-amp-知识&quot;&gt;&lt;a href=&quot;#二、什么是-amp-相关项目-amp-知识&quot; class=&quot;headerlink&quot; title=&quot;二、什么是&amp;amp;相关项目&amp;amp;知识&quot;&gt;&lt;/a&gt;二、什么是&amp;amp;相关项目&amp;amp;知识&lt;/h2&gt;&lt;h3 id=&quot;1、impress-js简介&quot;&gt;&lt;a href=&quot;#1、impress-js简介&quot; class=&quot;headerlink&quot; title=&quot;1、impress.js简介&quot;&gt;&lt;/a&gt;1、impress.js简介&lt;/h3&gt;&lt;h3 id=&quot;2、相关项目&quot;&gt;&lt;a href=&quot;#2、相关项目&quot; class=&quot;headerlink&quot; title=&quot;2、相关项目&quot;&gt;&lt;/a&gt;2、相关项目&lt;/h3&gt;&lt;p&gt;官方总结的相关项目和例子在&lt;a href=&quot;https://github.com/impress/impress.js/wiki/Examples-and-demos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。包含：工具、插件、demo等。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「插件」：显示演示文稿的进度条  &lt;a href=&quot;https://github.com/m42e/impress.js-progress&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&amp;gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;「工具」：快速构建基于impressJs的演示文稿  &lt;a href=&quot;http://strut.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&amp;gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外还有很多…&lt;/p&gt;
&lt;h3 id=&quot;3、需要提前了解&quot;&gt;&lt;a href=&quot;#3、需要提前了解&quot; class=&quot;headerlink&quot; title=&quot;3、需要提前了解&quot;&gt;&lt;/a&gt;3、需要提前了解&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;perspective &amp;amp; transform-style：&lt;a href=&quot;https://developer.mozilla.org/en/CSS/perspective&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档1&lt;/a&gt;、&lt;a href=&quot;http://www.w3cplus.com/css3/transform-basic-property.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;三、如何使用&quot;&gt;&lt;a href=&quot;#三、如何使用&quot; class=&quot;headerlink&quot; title=&quot;三、如何使用&quot;&gt;&lt;/a&gt;三、如何使用&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;唯一限制你的是&lt;strong&gt;想象力&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1、页面元素&quot;&gt;&lt;a href=&quot;#1、页面元素&quot; class=&quot;headerlink&quot; title=&quot;1、页面元素&quot;&gt;&lt;/a&gt;1、页面元素&lt;/h3&gt;&lt;h4 id=&quot;各元素介绍&quot;&gt;&lt;a href=&quot;#各元素介绍&quot; class=&quot;headerlink&quot; title=&quot;各元素介绍&quot;&gt;&lt;/a&gt;各元素介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;body：在不同状态下有不同的class属性值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器兼容：class=’impress-enabled’&lt;/li&gt;
&lt;li&gt;浏览器不兼容：class=’impress-not-supported’，如果在初始状态下就赋该值，可以使禁止了js的客户端用户仍可以看到有意义的信息&lt;/li&gt;
&lt;li&gt;当页面进入到某个「Page」（指演示文稿的一页，body&amp;gt;#impress&amp;gt;.step），如果该「Page」有id=’p1’，那么body上会生成class=’&lt;strong&gt;impress-on-p1&lt;/strong&gt;‘。&lt;strong&gt;不同的class代表了不同的「状态」，这样我们可以非常方便的控制每个「Page」下的样式&lt;/strong&gt;。另外，如果某个Page没有设置id，那么对应body上class为：impress-on-step-「Page的序号，从1开始」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;body&amp;gt;#impress&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下文称div#impress为「PPT」，「PPT」为impress.js的核心，所有的「Page」（class=’step’）都放在它里面&lt;/li&gt;
&lt;li&gt;id值当然是可配置的（默认”impress”）：&lt;code&gt;impress(&amp;#39;id&amp;#39;).init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可选属性：data-transition-duration=”1000”，表示页面切换动画用时1000ms（默认1000ms）&lt;/li&gt;
&lt;li&gt;可选属性：data-perspective=”1000”（默认1000像素），表示perspective（我一般理解为&lt;strong&gt;视距&lt;/strong&gt;，即人眼离画布的距离）值为1000px，用来表现3D效果。如果不希望使用3D可设值为0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;body&amp;gt;#impress&amp;gt;.step（简称「Page」）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有#impress的子元素都必须设置class=’step’&lt;/li&gt;
&lt;li&gt;文中所说的「Page」均指的是「#impress元素」下的「.step元素」，每个「Page」均表示演示文稿中的一页&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;通过在该节点上配置各种属性，我们就可以得到一个具有不同大小、位置、3D切换效果的演示文稿了，这些配置有 &lt;strong&gt;重点&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;data-x，data-y：如果将整个页面比作一个巨大的画布，那么我们需要确定每一个Page在这张画布上的具体位置。这两个属性指明了Page的&lt;strong&gt;「中心」&lt;/strong&gt;的x,y坐标。注意：&lt;strong&gt;值可以是负的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;data-scale：该属性表示Page的「缩放倍数」，设置了该属性的Page大小是「标准」（step上设置的width,height）的N倍，也就是长宽属性是标准Page的N倍。在画布上所占面积也当然有所不同。注意：&lt;strong&gt;值可以为小数，表示缩小&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;data-rotate：相当于为Page设置了样式transform:rotate(**deg)，表示对Page进行了旋转。该属性的值为角度数，当然可以为负值&lt;/li&gt;
&lt;li&gt;data-z：&lt;em&gt;「页面终于酷炫起来了」&lt;/em&gt; Page终于被赋予了3D属性。通过沿着z轴移动，拉近/远离了屏幕，相当于样式transform:translateZ(**px)，再结合#impress上的data-perspective，最终产生3D效果╮(╯_╰)╭&lt;/li&gt;
&lt;li&gt;data-rotate-x，data-rotate-y：不仅距离上可以对Page进行3D移动，还可以将Page进行x,y轴向的旋转操作，另外z轴的旋转就是前面的data-rotate。&lt;strong&gt;记：分别从上、左、正面看一个物体，顺时针方向就分别是y轴、x轴、z轴旋转的「正方向」&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;做个总结吧：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data-x&lt;/code&gt;, &lt;code&gt;data-y&lt;/code&gt;, &lt;code&gt;data-z&lt;/code&gt;：定义了Page的&lt;strong&gt;中心&lt;/strong&gt;在三维空间的位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data-rotate-x&lt;/code&gt;, &lt;code&gt;data-rotate-y&lt;/code&gt;, &lt;code&gt;data-rotate-z&lt;/code&gt;, &lt;code&gt;data-rotate&lt;/code&gt;：定义了Page沿x/y/z轴的旋转角度，「data-rotate-z」与「data-rotate」完全一致&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data-scale&lt;/code&gt;：定义了Page的缩放倍数，值为小数表示缩小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;预览功能：impress.js并没有直接提供「预览所有Page」的功能，但我们可以通过新建一个Page并设置特殊的属性值，很容易的实现。步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加一个Page，设置id=overview（当然别的也可以）&lt;/li&gt;
&lt;li&gt;计算「整个画布」所有Page在一起大概的宽高值（在排列各个Page的大小位置的时候，你最好画个草图），假设为：约6000px * 约3000px&lt;/li&gt;
&lt;li&gt;设置Page#overview的属性：data-x=3000,data-y=1500，也就是把#overview这个Page放到画布中央&lt;/li&gt;
&lt;li&gt;找一个合适的放大倍数，将#overview这个Page的大小覆盖到整个画布，假设没有缩放的Page宽高为900px,700px，你可以大概放大10倍：data-scale=10&lt;/li&gt;
&lt;li&gt;设置#overview相应的样式（详见下文），如：.impress-on-overview{ display: none } 等（因为我们不希望#overview遮盖到其他的Page）&lt;/li&gt;
&lt;li&gt;这样，当访问到#overview这个「Page」的时候，就可以&lt;strong&gt;预览&lt;/strong&gt;到整个画布（PPT）了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2、不同状态下页面元素分析：&quot;&gt;&lt;a href=&quot;#2、不同状态下页面元素分析：&quot; class=&quot;headerlink&quot; title=&quot;2、不同状态下页面元素分析：&quot;&gt;&lt;/a&gt;2、不同状态下页面元素分析：&lt;/h3&gt;&lt;h4 id=&quot;状态1：静态页面&quot;&gt;&lt;a href=&quot;#状态1：静态页面&quot; class=&quot;headerlink&quot; title=&quot;状态1：静态页面&quot;&gt;&lt;/a&gt;状态1：静态页面&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;body.impress-not-supported&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;impress-not-supported&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「PPT」div#impress&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;impress&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「Page」div.step&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div class=&lt;span class=&quot;string&quot;&gt;&quot;step&quot;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;attr&quot;&gt;-x&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;attr&quot;&gt;-y&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;attr&quot;&gt;...&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;状态2：浏览器加载页面&quot;&gt;&lt;a href=&quot;#状态2：浏览器加载页面&quot; class=&quot;headerlink&quot; title=&quot;状态2：浏览器加载页面&quot;&gt;&lt;/a&gt;状态2：浏览器加载页面&lt;/h4&gt;&lt;p&gt;浏览器执行代码：&lt;code&gt;impress().init();&lt;/code&gt; 之后，如果浏览器支持impressJs，那么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;body的class增加「.impress-supported」与「.impress-enabled」，并删除「.impress-not-supported」&lt;/li&gt;
&lt;li&gt;#impress的所有子节点「所有Page」，会被一个div包裹，页面结构变为：body&amp;gt;#impress&amp;gt;div&amp;gt;.step&lt;/li&gt;
&lt;li&gt;根据我们在「PPT」「Page」上设置的各种属性值（以及Page的width&amp;amp;height属性，页面的宽高等），计算得出一些样式（后面详述），分别赋值到body、#impress（PPT）、.step（Page）上&lt;/li&gt;
&lt;li&gt;框架会默认跳转到第一个Page：&lt;ul&gt;
&lt;li&gt;根据第一个Page的id值，假设为&lt;code&gt;p1&lt;/code&gt;，修改地址栏哈希值为：&lt;code&gt;/p1&lt;/code&gt;，如果Page没有id属性，那么根据页面顺序，地址栏哈希值为：&lt;code&gt;/step-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所有Page（.step）增加class：「.future」&lt;/li&gt;
&lt;li&gt;第一个Page（.step）增加class：「.active」表示为展示中状态，500ms（默认500ms，可由#impress上的data-transition-duration属性修改）之后，「.future」变为「.present」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;状态3：访问下一个Page&quot;&gt;&lt;a href=&quot;#状态3：访问下一个Page&quot; class=&quot;headerlink&quot; title=&quot;状态3：访问下一个Page&quot;&gt;&lt;/a&gt;状态3：访问下一个Page&lt;/h4&gt;&lt;p&gt;当用户点击空格或者方向键（右/下）之后，进入下一个Page（#impress .step:nth-child(2)）。&lt;br&gt;当访问到第二个Page之后，第一个Page的class「.present」变为「.past」，并删除「.active」。&lt;br&gt;第二个Page的class先增加「.active」，500ms后，class「.future 或者 .past」变为「.present」，并且地址栏哈希值变为第二个Page的id值或者&lt;code&gt;/step-2&lt;/code&gt;，&lt;/p&gt;
&lt;h4 id=&quot;future-gt-present-gt-past&quot;&gt;&lt;a href=&quot;#future-gt-present-gt-past&quot; class=&quot;headerlink&quot; title=&quot;.future-&amp;gt;.present-&amp;gt;.past&quot;&gt;&lt;/a&gt;.future-&amp;gt;.present-&amp;gt;.past&lt;/h4&gt;&lt;p&gt;future：未曾访问过的Page&lt;/p&gt;
&lt;p&gt;present：正在访问的Page（同时该页面还会有class「.active」）&lt;/p&gt;
&lt;p&gt;past：访问过的Page（只要曾经访问过，那么就是.past，当第二遍浏览到某个Page时，那么该Page的class为「.past,.active」）&lt;/p&gt;
&lt;p&gt;另外，当页面切换时，「.active」会立即生效，但「.future/.past -&amp;gt; .present」会在500ms后发生切换&lt;/p&gt;
&lt;h3 id=&quot;3、自定义css&quot;&gt;&lt;a href=&quot;#3、自定义css&quot; class=&quot;headerlink&quot; title=&quot;3、自定义css&quot;&gt;&lt;/a&gt;3、自定义css&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;「来自&lt;a href=&quot;https://github.com/stefina/impressJS/blob/master/css/impress-demo.css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;impress-demo.css&lt;/a&gt;中的注释，其实直接看这个文件也许更清楚」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Impress.js不调用任何外部的样式文件，&lt;strong&gt;JS会生成「动画所需」的所有样式&lt;/strong&gt;。&lt;br&gt;官方提供的&lt;a href=&quot;https://github.com/stefina/impressJS/blob/master/css/impress-demo.css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;impress-demo.css&lt;/a&gt;样式文件是为了演示用的，阅读它可以明白如何对impress.js中的元素进行渲染。具体内容如下：&lt;/p&gt;
&lt;h4 id=&quot;页面级&quot;&gt;&lt;a href=&quot;#页面级&quot; class=&quot;headerlink&quot; title=&quot;页面级&quot;&gt;&lt;/a&gt;页面级&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;你喜欢的reset和global样式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「.fallback-message」：若浏览器不兼容impress.js则展示此部分内容&lt;br&gt;同时需要声明：（浏览器支持impress.js时隐藏）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.impress-supported&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.fallback-message&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.fallback-message&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 不兼容时的样式 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Page级&quot;&gt;&lt;a href=&quot;#Page级&quot; class=&quot;headerlink&quot; title=&quot;Page级&quot;&gt;&lt;/a&gt;Page级&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;「.step」：需要指定width，该宽度会用于代入公式进行计算，&lt;br&gt;影响「Page看起来的大小」的因素有：#impress上缩放比例(scale)、.step宽高值(width)、3D透视属性（perspective,translateZ）等（下文会详述）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.step&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;900px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;600px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* etc.. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;「.impress-enabled .step」-非当前Page的样式，参考：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.impress-enabled&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.step&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;transition&lt;/span&gt;: opacity &lt;span class=&quot;number&quot;&gt;1s&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* prefix */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;「.impress-enabled .step.active」-当前Page样式：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 当前Page */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.impress-enabled&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.step&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.active&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;单张Page&quot;&gt;&lt;a href=&quot;#单张Page&quot; class=&quot;headerlink&quot; title=&quot;单张Page&quot;&gt;&lt;/a&gt;单张Page&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;（使用「Page的id属性」或者「body上的class的impress-on-**」区分作用域）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修改Page大小，修改样式：width,transform:translateZ&lt;/li&gt;
&lt;li&gt;Page上class可能取值：「.future」「.present」「.past」「.active」：（静态页面上class=’step’）&lt;ul&gt;
&lt;li&gt;Page未曾被访问过，class为：  「step future」&lt;/li&gt;
&lt;li&gt;刚刚转至某个Page，class为：  「step future active」&lt;/li&gt;
&lt;li&gt;转到某Page,500ms后，class为：「step present active」&lt;/li&gt;
&lt;li&gt;离开某Page，class为：       「step past」&lt;/li&gt;
&lt;li&gt;再次进入某Page，class为：    「step past active」&lt;/li&gt;
&lt;li&gt;再次进入某Page,500ms后，为： 「step present active」&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此我们可以通过这4种class，定制不同状态下的不同展示效果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果Page内部元素需要使用3D，那么记得要设置「transform-style:preserve-3d」，并且由于「3D transform标准」并不是十分明确，所以必须声明所有的&lt;strong&gt;-prefix-&lt;/strong&gt;（&amp;gt;=IE10兼容，且基本都需要加前缀）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;别忘了最后增加一个「.step」用来负责预览所有Page，比如官方例子中设置了「id=overview」，相应的body上会增加class：impress-on-overview，因此设置样式如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//防止预览时#overview遮住其他Page&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#overview&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:none&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置预览时其它Page的样式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.impress-on-overview&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.step&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;cursor&lt;/span&gt;: pointer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;作者的其它样式&quot;&gt;&lt;a href=&quot;#作者的其它样式&quot; class=&quot;headerlink&quot; title=&quot;作者的其它样式&quot;&gt;&lt;/a&gt;作者的其它样式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;作者发现的一个bug：有时候（chrome等部分浏览器部分版本）进行过3D变换的元素（尤其是沿z轴负方向移动的）会不可点击，原因是它们跑到了body后面。为了避免这个问题，&lt;br&gt;作者使用了「&lt;a href=&quot;https://developer.mozilla.org/en/CSS/pointer-events&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pointer-events: none&lt;/a&gt;」(IE11以上支持，在作者的努力下impress.js继续缩小了支持范围真是太棒了)，&lt;br&gt;使用原则是：设置「除#impress元素以外」的所有元素均不可点击，如：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.impress-enabled&lt;/span&gt;          &amp;#123; &lt;span class=&quot;attribute&quot;&gt;pointer-events&lt;/span&gt;: none &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.impress-enabled&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#impress&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;pointer-events&lt;/span&gt;: auto &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;作者写了一个「.hint」，目的是告知第一次使用演示文稿的同学如何操作，纯样式实现，没啥可说的（不过作用在body上的pointer-events属性让它也不可点击了）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;四、基本实现原理「重要」&quot;&gt;&lt;a href=&quot;#四、基本实现原理「重要」&quot; class=&quot;headerlink&quot; title=&quot;四、基本实现原理「重要」&quot;&gt;&lt;/a&gt;四、基本实现原理&lt;strong&gt;「重要」&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;1、如何使用CSS构建一个3D环境&quot;&gt;&lt;a href=&quot;#1、如何使用CSS构建一个3D环境&quot; class=&quot;headerlink&quot; title=&quot;1、如何使用CSS构建一个3D环境&quot;&gt;&lt;/a&gt;1、如何使用CSS构建一个3D环境&lt;/h3&gt;&lt;p&gt;你需要3层div，我们可以任性的分别取名为：#impress&amp;gt;#canvas&amp;gt;.step&lt;/p&gt;
&lt;p&gt;第一层#impress需要至少需要赋予属性值perspective:&lt;em&gt;*&lt;/em&gt;px，以及perspective-origin。perspective可以理解为「视距」（虽然中文意思是：透视，视角，&lt;br&gt;完全不明白的同学可以参考&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/?p=2592&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇&lt;/a&gt;，或者其他优秀文章），也就是眼睛距离屏幕的距离（z轴）。&lt;br&gt;perspective-origin指的是眼睛的方位（x,y轴）。这两个值确定了眼睛和屏幕的三维位置关系（xyz）（不了解「眼睛」有啥作用的话请继续看下文）。&lt;/p&gt;
&lt;p&gt;第二层#canvas，顾名思义可以称作「画布」，因为所有具体展现出来的的3D元素(.step)都包含在它内部。&lt;br&gt;它至少必须设置样式transform-style:preserve-3d，但这个样式为了保险，一般可以设置到这3层中的所有节点上。&lt;/p&gt;
&lt;p&gt;第三层.step，它就可以有很多兄弟节点了，这些节点通过设置translate:translate3d() rotate3d() scale()等等样式来定位自己在三维环境中的位置。&lt;br&gt;其中最关键的就是z轴的距离（translateZ），它定义了图形距离屏幕的距离。通过这个距离，以及在#impress中设置的「眼睛」距离屏幕的距离，我们可以画一个「从眼睛到图形的锥形」，&lt;br&gt;而「锥形与屏幕相交」的位置就是这个.step图形在屏幕上呈现的大小了。这么说不是太具体，请看下图（要是弄成可拖动带交互效果的就好了…）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../../../uploads/images/perspective.jpg&quot; alt=&quot;images&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面两张图中的画的眼睛可以理解为观察者的位置，那面白板可以看做是电脑屏幕，眼睛到白板的距离d就是perspective的值。虚线组成的圆形就是我们希望展示到页面上的图形（impress.js中就是Page）。由这个图形和观察者的眼睛组成的「视锥」投影到屏幕（白板）上的大小，就是屏幕最终展示的图形大小。而大量图形都通过这种方式呈现到屏幕上以后，图形之间就呈现了三维的视觉联系。&lt;/p&gt;
&lt;p&gt;完整的例子可以参考我的&lt;a href=&quot;http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E6%AD%A3%E6%96%B9%E4%BD%93.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个栗子&lt;/a&gt;，以及&lt;a href=&quot;http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个&lt;/a&gt;，还有&lt;a href=&quot;http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E7%BF%BB%E4%B9%A6.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、impress-js的切换动画&quot;&gt;&lt;a href=&quot;#2、impress-js的切换动画&quot; class=&quot;headerlink&quot; title=&quot;2、impress.js的切换动画&quot;&gt;&lt;/a&gt;2、impress.js的切换动画&lt;/h3&gt;&lt;p&gt;impress.js之所以这么awesome，最主要的就是各个Page之间的切换动画。每个Page都是上文中的第三层（.step），由于每个Page都会根据设置的各种属性值，被放置在三维环境中的某个位置，&lt;br&gt;它可能被放大、距离屏幕有一段距离、甚至xyz轴都进行了旋转，但我们必须从一个Page动态的切换到另一个Page，那么到底如何切换呢？（假设我们要从Page1切换到Page2）&lt;/p&gt;
&lt;p&gt;首先我们要通过对第二层#canvas进行各种3D/2D变换，来抵消Page2的各种3D/2D变换，比如Page2沿z轴旋转了90deg，那么#canvas则要沿z轴旋转-90deg进行抵消。&lt;br&gt;就像在玩儿魔方一样，Page相当于魔方的每一个小块，而#canvas相当于魔方本身，我们可以通过旋转和平移魔方的方式将魔方的任意一个小块移动到我们的「正前方」，&lt;br&gt;同样的道理，我们可以通过将整个画布进行各种3D/2D的变换，来把某一个Page移动到我们的正前方。但要注意的是，我们不进行缩放（scale）。&lt;/p&gt;
&lt;p&gt;虽然Page2已经移动到屏幕的正前方了，但如果Page2放大了2倍（data-scale=2），那么我们接下来要抵消它，我们可以通过在#impress上设置样式transform:scale(.5)来反向的缩小2倍，&lt;br&gt;同时为了保证「视距」（眼睛到屏幕的距离）在缩放后依然保持不变，我们还要将#impress上的perspective属性除以2。&lt;/p&gt;
&lt;p&gt;再通过在#impress和#canvas上设置transition来实现切换的动画效果&lt;/p&gt;
&lt;p&gt;最后需要注意的是，为了使切换尽可能的美观，#impress对「镜头」的拉近远离操作，以及#canvas对「镜头」的旋转平移3d变换操作，它们两者的先后顺序不是一成不变的，基本的原则是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果#impress需要对物体进行拉近操作（拉近操作：Page2的data-scale比Page1的大，那么由Page1切换到Page2就是拉近操作），那么就先操作#canvas，再操作#impress进行放大；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果#impress需要对物体进行拉远操作，那么需要先操作#impress进行拉远操作，再进行#canvas的变换操作。这样就可以看到#canvas变换时，Page2发生的各种变换的全过程！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;五、项目中如何用-amp-借鉴价值&quot;&gt;&lt;a href=&quot;#五、项目中如何用-amp-借鉴价值&quot; class=&quot;headerlink&quot; title=&quot;五、项目中如何用&amp;amp;借鉴价值&quot;&gt;&lt;/a&gt;五、项目中如何用&amp;amp;借鉴价值&lt;/h2&gt;&lt;h3 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;兼容性非常差，需要&amp;gt;=IE10，且IE全都不支持transform-style:preserve-3d&lt;/li&gt;
&lt;li&gt;移动端展示效果还有待更全面的测试，而作者完全弃用了移动端，虽然作者在开发代码之后的几年移动端性能进步很大，但根据其它项目经验来看在大量3D元素的情况下至少低端机帧率会降低很多，用户体验差的话还不如不用，比如&lt;a href=&quot;https://tianyn1990.github.io/dist/views/ppt/ppt.html#/beach&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个&lt;/a&gt;，其实也做了手机的适配，但效果就…&lt;/li&gt;
&lt;li&gt;需要有一定的改造成本和测试成本，这个框架可能不适合直接使用，需要定制&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;优势：&quot;&gt;&lt;a href=&quot;#优势：&quot; class=&quot;headerlink&quot; title=&quot;优势：&quot;&gt;&lt;/a&gt;优势：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;的确很酷炫啊有木有&lt;/li&gt;
&lt;li&gt;兼容和移动端问题，可以仅仅针对部分使用现代PC浏览器的用户提供一个非常酷炫的页面，类似天猫双十一期间的一些游戏和canvas活动页&lt;/li&gt;
&lt;li&gt;移动端的话由于性能较差，但如果使用经过极大优化的js动画（如：&lt;a href=&quot;http://julian.com/research/velocity/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;velocity&lt;/a&gt;），并且适当避免复杂的3d效果，效果和性能还是值得期待的。js动画可优化的部分至少包括以下几点：（当然不完整）&lt;ul&gt;
&lt;li&gt;缓存动画元素的状态（类似canvas），减少读操作&lt;/li&gt;
&lt;li&gt;同步的DOM读写：框架层面上，在浏览器一帧的渲染中，所有DOM操作统一先读后写，减少&lt;a href=&quot;http://wilsonpage.co.uk/preventing-layout-thrashing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;layout thrashing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;借鉴：&quot;&gt;&lt;a href=&quot;#借鉴：&quot; class=&quot;headerlink&quot; title=&quot;借鉴：&quot;&gt;&lt;/a&gt;借鉴：&lt;/h3&gt;&lt;p&gt;impress.js的酷炫效果源于将平面页面（PPT）的各个部分（Page）拆分出来，然后三维化了（可近可远、可斜可转、甚至可以在你后面）。&lt;br&gt;借鉴这种思想，打开脑洞：当你点击页面上一个人头像的小图标之后，屏幕会拉近那个头像图标并最终进入到它的内部，（eng二声），&lt;br&gt;那里会出现另一个页面，就是那个头像对应的人的主页。如果单页面应用做成这样，光是想想就有点小激动呢&lt;del&gt;~&lt;/del&gt;~&lt;/p&gt;
&lt;h2 id=&quot;六、结语&quot;&gt;&lt;a href=&quot;#六、结语&quot; class=&quot;headerlink&quot; title=&quot;六、结语&quot;&gt;&lt;/a&gt;六、结语&lt;/h2&gt;&lt;p&gt;本文的语言还需要再进行梳理，有些内容自己理解了但没讲清楚，而有些内容有可能讲的过细。&lt;/p&gt;
&lt;h2 id=&quot;附：代码详细分析（未完成-）&quot;&gt;&lt;a href=&quot;#附：代码详细分析（未完成-）&quot; class=&quot;headerlink&quot; title=&quot;附：代码详细分析（未完成..）&quot;&gt;&lt;/a&gt;附：代码详细分析（未完成..）&lt;/h2&gt;&lt;h3 id=&quot;1、解决兼容性&quot;&gt;&lt;a href=&quot;#1、解决兼容性&quot; class=&quot;headerlink&quot; title=&quot;1、解决兼容性&quot;&gt;&lt;/a&gt;1、解决兼容性&lt;/h3&gt;&lt;p&gt;为了解决「不同浏览器中，给DOM赋予内联样式的兼容性问题」，作者首先参考&lt;a href=&quot;https://modernizr.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Modernizr&lt;/a&gt;写了一个功能函数，见下方代码，值得认真读一下&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&quot;https://github.com/Modernizr/Modernizr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Modernizr github&lt;/a&gt;项目用于检测HTML5 &amp;amp; CSS3新特性是否适用于浏览器，你可以在css以及js中使用它，详见&lt;a href=&quot;https://modernizr.com/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原理：创建一个Element元素，假设命名为dummy，如果希望赋值「style=’width:100px’」，那么分别检测dummy.style是否包含如下属性之一：width,WebkitWidth,MozWidth,OWidth,msWidth,KhtmlWidth。&lt;br&gt;如果dummy.style中存在其中的某个属性，比如WebkitWidth存在，那么赋值dummy.style.WebkitWidth=’100px’，并且将这个属性记录下来，以便下次调用时直接使用。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;figure class=&quot;highlight julia&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 解决不同浏览器中，给DOM赋予内联样式的兼容性问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;meta&quot;&gt;@param&lt;/span&gt; prop &amp;#123;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;#125; css属性，注意如果属性由横线「-」链接，请改为驼峰式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *                      比如mozilla内核独有css：-moz-box-pack，你需要这样使用：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;*         //代码在火狐浏览器下返回「MozBoxPack」，你可以调用element.style.MozBozPack来为该属性赋值
*         var pkey = pfx(&amp;apos;boxPack&amp;apos;);
*
*         &lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; * @returns &amp;#123;string/Null&amp;#125; 当前浏览器下，element.style中的对应属性；如果当前浏览器不支持，则返回&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pfx = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; style = document.createElement(&lt;span class=&quot;string&quot;&gt;&#39;dummy&#39;&lt;/span&gt;).style,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            prefixes = &lt;span class=&quot;string&quot;&gt;&#39;Webkit Moz O ms Khtml&#39;&lt;/span&gt;.split(&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            memory = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( prop )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; memory[ prop ] === &lt;span class=&quot;string&quot;&gt;&quot;undefined&quot;&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ucProp  = prop.charAt(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).toUpperCase() + prop.substr(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    props   = (prop + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + prefixes.join(ucProp + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;) + ucProp).split(&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                memory[ prop ] = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ( &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; props ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( style[ props[i] ] !== &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        memory[ prop ] = props[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; memory[ prop ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//另一个例子：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; setStyle = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(elem, key, val)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pkey = pfx(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pkey) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        elem.style[pkey] = val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setStyle(someElem, &lt;span class=&quot;string&quot;&gt;&#39;width&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;100px&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2、各种功能函数&quot;&gt;&lt;a href=&quot;#2、各种功能函数&quot; class=&quot;headerlink&quot; title=&quot;2、各种功能函数&quot;&gt;&lt;/a&gt;2、各种功能函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;array-like -&amp;gt; Array  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// `arraify` takes an&lt;span class=&quot;built_in&quot;&gt; array-like &lt;/span&gt;object&lt;span class=&quot;built_in&quot;&gt; and &lt;/span&gt;turns it into real Array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// to make all the Array.prototype goodness available.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var arrayify = function ( a ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; return &lt;/span&gt;[].slice.call( a );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将array-like对象转换成Array类型，使对象拥有数组的各种方法，便于各种操作。其实应该缓存「[]」，不是因为内存消耗，而是每次调用会增加一次创建数组对象的时间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;批量设置内联样式&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// `css` function applies the styles given &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `&lt;span class=&quot;built_in&quot;&gt;props&lt;/span&gt;` object to the element&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// given as `el`. It runs all property names through `pfx` function to make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// sure proper prefixed version of the property &lt;span class=&quot;built_in&quot;&gt;is&lt;/span&gt; used.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; css = function ( el, &lt;span class=&quot;built_in&quot;&gt;props&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;, pkey;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ( &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;props&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;built_in&quot;&gt;props&lt;/span&gt;.hasOwnProperty(&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;) ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pkey = pfx(&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( pkey !== null ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                el.&lt;span class=&quot;built_in&quot;&gt;style&lt;/span&gt;[pkey] = &lt;span class=&quot;built_in&quot;&gt;props&lt;/span&gt;[&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; el;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;批量设置内联样式，它内部当然使用的是pfx函数了，由于props参数是{}对象，因此要hasOwnProperty&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;选择器：&lt;br&gt;var byId = function ( id ){…}：document.getElementById(id)&lt;/p&gt;
&lt;p&gt;var $ = function ( selector, context ){…}：context.querySelector(selector); 返回对象&lt;/p&gt;
&lt;p&gt;var $$ = function ( selector, context ){…}：arrayify( context.querySelectorAll(selector) ); 返回数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自定义事件：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// `triggerEvent` builds &lt;span class=&quot;literal&quot;&gt;a&lt;/span&gt; custom DOM event with given `eventName` &lt;span class=&quot;literal&quot;&gt;and&lt;/span&gt; `detail` data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;literal&quot;&gt;and&lt;/span&gt; triggers it on element given as `el`.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var triggerEvent = function (el, eventName, detail) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var event = document.createEvent(&lt;span class=&quot;string&quot;&gt;&quot;CustomEvent&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event.initCustomEvent(eventName, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, detail)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    el.dispatchEvent(event)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个待我慢慢道来。首先根据&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Creating and triggering events&lt;/a&gt;&lt;br&gt;中的分类，类似作者的这种自定义事件方式，属于过时的方法，在最新的规范中已经被剔除，使用该方案而没有做兼容判断的js随时可能报错（虽然如果想兼容IE的话就必须用这种方式），这个所谓的过时方法举例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 为了这个栗子，首先得有一个Element&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; elem = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;body&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第一步：创建事件对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个Event对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; event = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createEvent(&lt;span class=&quot;string&quot;&gt;&#39;HTMLEvents&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第二步：初始化事件对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定制化Event对象的各种参数：名称为「build」（因此为自定义事件）、可以bubble、允许cancel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;event.initEvent(&lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第三步：注册事件：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 向某个Element注册build事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;elem.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(e.target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(e.detail);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第四步：触发事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用js触发（自定义事件当然用js触发了）某个Element上自定义的事件event（名称「build」，可bubble，可cancel）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;elem.dispatchEvent(event);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;总结一下就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;步1+步2：创建（createEvent）&amp;amp;初始化（initEvent）事件对象。通过这两步，你会得到一个Event对象。创建事件时的参数是’HTMLEvents’，这样会得到一个Event对象，&lt;br&gt;如果使用’MouseEvents’作为参数，那么得到的是一个MouseEvent对象，而MouseEvent对象初始化的时候需要使用’initMouseEvent’函数，它们都属于规范「&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DOM Level 2 Events&lt;/a&gt;」。&lt;br&gt;这种对应关系：「HTMLEvents &amp;lt;-&amp;gt; event.initEvent()」「MouseEvents &amp;lt;-&amp;gt; event.initMouseEvent()」，可以参考：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent#Notes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN createEvent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;步3：这不重要不是么，无论是否注册了事件，你都可以触发它，也就是没有任何意义罢了，如果兼容IE67记得用attachEvent ：）&lt;/li&gt;
&lt;li&gt;步4：触发事件的时候，如果在初始化的时候的第二个参数是true，那么它就会向父节点冒泡，如果父节点也注册了’build’事件，那么也会触发回调函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你一定注意到了在作者的代码中创建事件的时候使用的参数是：”CustomEvent”，这样会生成一个CustomEvent对象，这个对象对应的初始化方法为：event.initCustomEvent()，它与initEvent的不同之处在于可以传第4个参数，该参数是一个对象{}，它会在addEventListener注册事件的时候传到回调函数的参数中，你可以在evt.detail中访问到：&lt;/p&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;event.initCustomEvent(&lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;k&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;v&quot;&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;elem.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(e.detail);//&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;k&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;v&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：’CustomEvent’需要&amp;gt;=IE9才支持，且「不完全支持」，因为CustomEvent的另一种用法，也就是新的规范中建议的用法：「使用new CustomEvent(…)来同时完成创建和初始化两步」，IE&lt;strong&gt;全都不支持&lt;/strong&gt; :(&lt;/p&gt;
&lt;p&gt;下面举个栗子来说明一下用法吧：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//原来是这样写的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;event&lt;/span&gt; = document.createEvent(&lt;span class=&quot;string&quot;&gt;&#39;CustomEvent&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;event&lt;/span&gt;.initCustomEvent(&lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;k&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;v&quot;&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//新规范要求这样写（IE全都不支持，不支持!）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;event&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CustomEvent(&lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;, &amp;#123;bubbles: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, cancelable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, detail: &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;k&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;v&quot;&lt;/span&gt;&amp;#125;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以写一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;polyfill&lt;/a&gt;合并前两种情况，这样就兼容所有&amp;gt;=IE9了：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CustomEvent&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt; event, params &lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    params = params || &amp;#123; bubbles: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, cancelable: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, detail: &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; evt = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createEvent( &lt;span class=&quot;string&quot;&gt;&#39;CustomEvent&#39;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; evt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CustomEvent.prototype = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.Event.prototype;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.CustomEvent = CustomEvent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你还想了解事件对象Event的各种参数（如：target,currentTarget,timeStamp,type,isTrusted…）和方法（如：…），请参考&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当然，由于以上的种种原因，以及为了获得更灵活的控制，很多框架中常常自己实现一套事件系统，甚至还可以使用发布-订阅模型等等，&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/?p=2330&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;是张鑫旭大大多年前的简单实现以及讲解，&lt;br&gt;其实就是把创建的自定义事件和回调函数按照对应关系放到一个js对象中进行管理，我就不用再啰嗦了 (^o^)&lt;/p&gt;
&lt;p&gt;由作者的功能函数中的事件函数引发的一些说明暂时就到这里，下面继续看作者写的功能函数代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;computeWindowScale&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先上代码：&lt;/p&gt;
&lt;figure class=&quot;highlight verilog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; computeWindowScale = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; ( &lt;span class=&quot;keyword&quot;&gt;config&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 计算出window的宽高分别与config参数之间的比值，这个比值最终会应用在PPT（body&amp;gt;div#impress）节点上，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 最终保证每一页演示文稿（Page）呈现到浏览器窗口中都「看起来一样大」&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hScale = window&lt;span class=&quot;variable&quot;&gt;.innerHeight&lt;/span&gt; / &lt;span class=&quot;keyword&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.height&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wScale = window&lt;span class=&quot;variable&quot;&gt;.innerWidth&lt;/span&gt; / &lt;span class=&quot;keyword&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.width&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 最终的整体缩放比例取宽高比值中较小的一个，举个栗子说明下原因：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         假如某一页文稿（Page）非常的长（width:1000px; height:3000px;），window的宽高为：width:1000px; height:500px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         那么最终采用的比值scale是 window.innerHeight/config.height = 1/6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         这个值比较小，那么整个PPT将会被设置：transform:scale(0.166667)，被整体缩小为1/6，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         这样就可以把这个高度很大的Page完整的呈献给用户了（作者的最终目的）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        scale = hScale &amp;gt; wScale ? wScale : hScale;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 同时作者还设置了一个最大最小scale，用来处理异常参数，基本用不上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.maxScale&lt;/span&gt; &amp;amp;&amp;amp; scale &amp;gt; &lt;span class=&quot;keyword&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.maxScale&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        scale = &lt;span class=&quot;keyword&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.maxScale&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.minScale&lt;/span&gt; &amp;amp;&amp;amp; scale &amp;lt; &lt;span class=&quot;keyword&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.minScale&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        scale = &lt;span class=&quot;keyword&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.minScale&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; scale;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;computeWindowScale函数根据「入参」与「浏览器窗口的宽高」，计算得出当前PPT（body&amp;gt;div#impress）节点的缩放倍数（transform:scale），具体的计算逻辑见上面代码的注释。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;其他功能函数：（不重要，可直接略过）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;var toNumber = function (numeric, fallback){…}：将numeric转换成数字，如果无法转换则返回fallback&lt;/li&gt;
&lt;li&gt;translate、rotate、scale、perspective：根据参数返回拼装好的值，便于设置样式transform&lt;/li&gt;
&lt;li&gt;getElementFromHash：根据地址栏的hash值，返回id属性为该hash值的结点，其实就是找到当前的Page（还记得Page指什么吗~）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3、校验浏览器的支持性&quot;&gt;&lt;a href=&quot;#3、校验浏览器的支持性&quot; class=&quot;headerlink&quot; title=&quot;3、校验浏览器的支持性&quot;&gt;&lt;/a&gt;3、校验浏览器的支持性&lt;/h3&gt;&lt;p&gt;方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight d&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// CHECK SUPPORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var &lt;span class=&quot;keyword&quot;&gt;body&lt;/span&gt; = document.&lt;span class=&quot;keyword&quot;&gt;body&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var ua = navigator.userAgent.toLowerCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var impressSupported =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;comment&quot;&gt;// browser should support CSS 3D transtorms&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       ( pfx(&lt;span class=&quot;string&quot;&gt;&quot;perspective&quot;&lt;/span&gt;) !== &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; ) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;comment&quot;&gt;// and `classList` and `dataset` APIs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       ( &lt;span class=&quot;keyword&quot;&gt;body&lt;/span&gt;.classList ) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       ( &lt;span class=&quot;keyword&quot;&gt;body&lt;/span&gt;.dataset ) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;comment&quot;&gt;// but some mobile devices need to be blacklisted,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;comment&quot;&gt;// because their CSS 3D support or hardware is not&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;comment&quot;&gt;// good enough to run impress.js properly, sorry...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       ( ua.search(/(iphone)|(ipod)|(android)/) === -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!impressSupported) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// we can&#39;t be sure that `classList` is supported&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;body&lt;/span&gt;.className += &lt;span class=&quot;string&quot;&gt;&quot; impress-not-supported &quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;body&lt;/span&gt;.classList.remove(&lt;span class=&quot;string&quot;&gt;&quot;impress-not-supported&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;body&lt;/span&gt;.classList.add(&lt;span class=&quot;string&quot;&gt;&quot;impress-supported&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;impress.js需要浏览器支持CSS 3D（根据是否支持perspective样式来判断，需要&amp;gt;=IE10，且IE全都不支持transform-style:preserve-3d），&lt;br&gt;DOM节点要有&lt;code&gt;classList&lt;/code&gt; 和 &lt;code&gt;dataset&lt;/code&gt; API，并且最后作者还任性的把几乎所有手机都排除了，不过也对，手机跑起这种页面会卡卡的根本没什么可Awesome的吧~&lt;/p&gt;
&lt;p&gt;如果不支持，那么为body的class属性增加值impress-not-supported，如果支持，则增加值impress-supported。&lt;/p&gt;
&lt;h3 id=&quot;4、全局对象-amp-默认值&quot;&gt;&lt;a href=&quot;#4、全局对象-amp-默认值&quot; class=&quot;headerlink&quot; title=&quot;4、全局对象&amp;amp;默认值&quot;&gt;&lt;/a&gt;4、全局对象&amp;amp;默认值&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;roots对象：初始值为空对象{}，里面包含了所有的impress实例（你可以在页面上生成多个impress实例，但没有任何意义）。最终这个对象里面会包含如下一些方法：&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// rootId就是PPT(body&amp;gt;div#impress)的id值，默认值自然就是impress了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;roots[ &lt;span class=&quot;string&quot;&gt;&quot;impress-root-&quot;&lt;/span&gt; + rootId ] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//初始化。DOM结构上，Page(s)外面包裹了一个div&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    init:&lt;/span&gt; init,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//转到某一个Page，参数有：el（Page节点），duration（切换动画的毫秒数）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    goto:&lt;/span&gt; goto,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//next与prev，都是基于goto实现的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    next:&lt;/span&gt; next,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    prev:&lt;/span&gt; prev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;defaults对象，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var defaults = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;   width:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;   height:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;768&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;   maxScale:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;   minScale:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   perspective:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   transitionDuration:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还记得前面的computeWindowScale函数吗，这个函数的参数的默认值就是这个default（具体看下面代码），在实际运用中，该函数的参数取值为如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight roboconf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var rootData = root.dataset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: toNumber( rootData&lt;span class=&quot;variable&quot;&gt;.width&lt;/span&gt;, defaults&lt;span class=&quot;variable&quot;&gt;.width&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: toNumber( rootData&lt;span class=&quot;variable&quot;&gt;.height&lt;/span&gt;, defaults&lt;span class=&quot;variable&quot;&gt;.height&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maxScale: toNumber( rootData&lt;span class=&quot;variable&quot;&gt;.maxScale&lt;/span&gt;, defaults&lt;span class=&quot;variable&quot;&gt;.maxScale&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    minScale: toNumber( rootData&lt;span class=&quot;variable&quot;&gt;.minScale&lt;/span&gt;, defaults&lt;span class=&quot;variable&quot;&gt;.minScale&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    perspective: toNumber( rootData&lt;span class=&quot;variable&quot;&gt;.perspective&lt;/span&gt;, defaults&lt;span class=&quot;variable&quot;&gt;.perspective&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transitionDuration: toNumber( rootData&lt;span class=&quot;variable&quot;&gt;.transitionDuration&lt;/span&gt;, defaults&lt;span class=&quot;variable&quot;&gt;.transitionDuration&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;computeWindowScale(config);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;root就是div#impress节点，假设root节点为：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;impress&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-perspective&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;1400&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;1000&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么root.dataset为：{perspective:2000, width: 1400, height: 1000}，所以可以通过更改#impress节点上的&lt;strong&gt;data-*&lt;/strong&gt;属性来改变computeWindowScale函数的入参，&lt;br&gt;从而改变Page（单张演示文稿）占整个window视口的大小。&lt;/p&gt;
&lt;p&gt;PPT的缩放比例transform:scale由computeWindowScale函数计算得出，得出的结果还要除以当前Page的data-scale属性（也就是Page的放大倍数），以确保每张Page在展现出来的时候，所占屏幕的宽/高都是一样的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5、事件定义&quot;&gt;&lt;a href=&quot;#5、事件定义&quot; class=&quot;headerlink&quot; title=&quot;5、事件定义&quot;&gt;&lt;/a&gt;5、事件定义&lt;/h3&gt;&lt;p&gt;前面有很长一段内容都说的自定义事件，作者在代码中定义了一些事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对Page定义了两种事件：分别是：&lt;code&gt;impress:stepenter&lt;/code&gt;，当新的Page展示出来之后触发，注意该事件触发时Page切换的动画已经结束&lt;/li&gt;
&lt;li&gt;针对Page的另一个事件是：&lt;code&gt;impress:stepleave&lt;/code&gt;，当Page准备离开时触发，此时动画刚刚开始&lt;/li&gt;
&lt;li&gt;todo:未完待续…;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;6、init方法：&quot;&gt;&lt;a href=&quot;#6、init方法：&quot; class=&quot;headerlink&quot; title=&quot;6、init方法：&quot;&gt;&lt;/a&gt;6、init方法：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置meta viewport，虽然在前面作者几乎排除了所有的移动端设备，但至少ipad还是可以的（屏幕又大，性能相对也比较好）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初始化config参数（前面有提到），然后根据config计算PPT的scale缩放倍数：&lt;code&gt;windowScale = computeWindowScale( config );&lt;/code&gt;，使每张Page都呈现出来大小都是比较合适的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;「重要」&lt;/strong&gt;将所有Page的外面包裹一层div，该节点对应变量&lt;code&gt;canvas&lt;/code&gt;，这层div使用CSS 3D所必须的（至少按我的了解是这样），你可以看看我的&lt;a href=&quot;http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E6%AD%A3%E6%96%B9%E4%BD%93.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个例子&lt;/a&gt;，以及&lt;a href=&quot;http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个&lt;/a&gt;，还有&lt;a href=&quot;http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E7%BF%BB%E4%B9%A6.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个&lt;/a&gt;，搭建一个完整的3D效果具体步骤如下（基本复述了前面原理部分讲过的内容）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最外层div（也就是#impress）声明视距（观察者的眼睛离屏幕的距离），也就是设置样式：transform:perspective(&lt;strong&gt;&lt;em&gt;px) 或者 perspective:&lt;/em&gt;&lt;/strong&gt;px；以及观察角度：perspective-origin&lt;/li&gt;
&lt;li&gt;第二层div（就是代码中新增的那层div）设置：transform-style:preserve-3d（IE不支持），声明这是一个画布，当然你也可以同时声明多个画布，可以通过设置画布的transform 3d属性来控制整个画布的3d变换&lt;/li&gt;
&lt;li&gt;第三层就可以写各种各样的3d模块了，它们都是按照以上的视距、观察角度来展示的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为#impress和内部第二层div设置基础样式：（root为#impress，canvas为第二层div）&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var rootStyles = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    position:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;absolute&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    transformOrigin:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;top left&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    transition:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;all 0s ease-in-out&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    transformStyle:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;preserve-3d&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;css(root, rootStyles);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;css(root, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    top:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;50%&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    left:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;50%&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    transform:&lt;/span&gt; perspective( config.perspective/windowScale ) + scale( windowScale )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;css(canvas, rootStyles);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;值得注意的是root的transform属性，为了保证视距在各个Page看起来都是一致的，所以在将PPT缩放scale倍的同时，也需要将perspective进行scale倍的缩放&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初始化所有Page（.step）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将Page上的属性（&lt;code&gt;&amp;lt;div class=step data-x=100 data-y=-100 data-scale=4 ...&amp;gt;&lt;/code&gt;）存储到&lt;code&gt;stepsData&lt;/code&gt;对象中，并根据Page上的属性，设置对应的样式：&lt;/p&gt;
  &lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// get and init steps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;steps&lt;/span&gt; = $$(&lt;span class=&quot;string&quot;&gt;&quot;.step&quot;&lt;/span&gt;, root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;steps&lt;/span&gt;.forEach( initStep );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// `initStep` initializes given step element by reading &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; from its&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; attributes and setting correct styles.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; initStep = function ( el, idx ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; = el.dataset,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        step = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            translate: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                x: toNumber(&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;.x),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                y: toNumber(&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;.y),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                z: toNumber(&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;.z)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rotate: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                x: toNumber(&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;.rotateX),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                y: toNumber(&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;.rotateY),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                z: toNumber(&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;.rotateZ || &lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;.rotate)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            scale: toNumber(&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;.scale, 1),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            el: el&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( !el.id ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        el.id = &lt;span class=&quot;string&quot;&gt;&quot;step-&quot;&lt;/span&gt; + (idx + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stepsData[&lt;span class=&quot;string&quot;&gt;&quot;impress-&quot;&lt;/span&gt; + el.id] = step;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    css(el, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        position: &lt;span class=&quot;string&quot;&gt;&quot;absolute&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transform: &lt;span class=&quot;string&quot;&gt;&quot;translate(-50%,-50%)&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   translate(step.translate) +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   rotate(step.rotate) +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   scale(step.scale),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transformStyle: &lt;span class=&quot;string&quot;&gt;&quot;preserve-3d&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;初始化canvas的值&lt;blockquote&gt;
&lt;p&gt;canvas：#impress下一层div，它包裹着所有Pages&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们之所以能够看到3D环境中的每一个Page，就是要靠canvas通过各种transform 3d变换，来变换画布，使当前Page处于&lt;strong&gt;「正前方」&lt;/strong&gt;，再由PPT上的perspective和scale属性来把「镜头」拉近到Page跟前。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码详细分析，未完待续…&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;by &lt;a href=&quot;https://tianyn1990.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tianyn1990&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在开始阅读本文之前，你至少应该打开官网的&lt;a href=&quot;http://impress.github.io/impress.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;例子&lt;/a&gt;看看，并且&lt;a href=&quot;https://github.com/s
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="impress" scheme="http://yoursite.com/tags/impress/"/>
    
  </entry>
  
  <entry>
    <title>JS中的事件循环与定时器</title>
    <link href="http://yoursite.com/2016/06/17/JS%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <id>http://yoursite.com/2016/06/17/JS中的事件循环与定时器/</id>
    <published>2016-06-17T15:19:50.552Z</published>
    <updated>2016-06-17T15:19:50.588Z</updated>
    
    <content type="html">&lt;p&gt;&lt;em&gt;本文是在看过一些文章和视频之后，结合自己的理解，做的一个汇总，如果发现理解错误的地方，请及时指出便于更正。&lt;/em&gt; &lt;strong&gt;Orz&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;一、单线程&quot;&gt;&lt;a href=&quot;#一、单线程&quot; class=&quot;headerlink&quot; title=&quot;一、单线程&quot;&gt;&lt;/a&gt;一、单线程&lt;/h3&gt;&lt;p&gt;javascript单线程执行，是由浏览器的场景决定的，避免了复杂的同步问题。HTML5提出「Web Worker」标准，允许js创建多个线程，但子线程仍受主线程控制，且不能操作DOM，js的本质未变。&lt;/p&gt;
&lt;h3 id=&quot;二、任务队列-amp-事件循环&quot;&gt;&lt;a href=&quot;#二、任务队列-amp-事件循环&quot; class=&quot;headerlink&quot; title=&quot;二、任务队列 &amp;amp; 事件循环&quot;&gt;&lt;/a&gt;二、任务队列 &amp;amp; 事件循环&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;../../../../uploads/images/taskqueue.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;任务分为：&lt;strong&gt;同步任务（synchronous）&lt;/strong&gt;、&lt;strong&gt;异步任务（asynchronous）&lt;/strong&gt;；同步任务被放入&lt;strong&gt;主线程&lt;/strong&gt;，异步任务放入&lt;strong&gt;任务队列（task queue）&lt;/strong&gt;。任务队列中的异步任务一旦运行有了结果，那么会在任务队列中放置一个对应的事件，当主线程中的同步任务全部执行完毕以后，会检查任务队列，将包含对应事件的异步任务放入主线程，然后主线程会执行所有任务，执行完毕以后再次检查task queue。这样不断循环的过程就叫做&lt;strong&gt;「event loop」&lt;/strong&gt;。（需要注意的是，loop的时间精度在4ms-16ms之间，oldIE会比较大，部分现代浏览器会判断pc是否外接电源来调整精确度）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;task queue中的「事件」包括：IO设备（keypress,network events like ajax…）、鼠标点击、页面滚动等。事件被添加到主线程后，在下一个loop中执行的是该事件的「回调函数」，所以async task都有回调函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;task queue是「先进先出」队列结构，首先注册的事件第一个进入主线程等待执行。但「定时器」功能还会校验该事件的时间，到达时间后的async task才进入主线程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;../../../../uploads/images/eventloop.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如上图，主线程的运行会产生&lt;strong&gt;「堆 heap」&lt;/strong&gt;和&lt;strong&gt;「栈 stack」&lt;/strong&gt;，&lt;strong&gt;「执行栈」&lt;/strong&gt;（主线程）中的代码可能会通过调用「WebAPIs」在task queue中创建async task，得到结果的async task会将「回调函数」放入callback queue中，并把相应事件放入task queue中，当「执行栈」中的代码执行完毕，就会依次将task queue中所有符合时间要求（定时器）的事件放入「执行栈」中，并在下一个event loop中执行对应的「回调函数」。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;三、定时器&quot;&gt;&lt;a href=&quot;#三、定时器&quot; class=&quot;headerlink&quot; title=&quot;三、定时器&quot;&gt;&lt;/a&gt;三、定时器&lt;/h3&gt;&lt;h3 id=&quot;setTimeout&quot;&gt;&lt;a href=&quot;#setTimeout&quot; class=&quot;headerlink&quot; title=&quot;setTimeout&quot;&gt;&lt;/a&gt;setTimeout&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;setTimeout 与 setInterval 实现原理一致，setTimeout(fn,0) 会将「事件」放入task queue的&lt;strong&gt;尾部&lt;/strong&gt;，在&lt;strong&gt;下一次loop&lt;/strong&gt;中，当「同步任务」与task queue中现有事件都执行完之后再执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;setTimeout存在&lt;strong&gt;「时间精度问题」&lt;/strong&gt;，至少在4ms以上，根据浏览器、设备是否插电源等有所不同，最多能达到近16ms。为了解决这个问题，加快响应速度，产生了&lt;strong&gt;「setImmediate API 与 setImmediate.js项目」&lt;/strong&gt;与&lt;strong&gt;「requestAnimationFrame」&lt;/strong&gt;，前者解决&lt;strong&gt;「触发之后，立即调用回调函数，希望延迟尽可能短」&lt;/strong&gt;的情况，后者可以实现&lt;strong&gt;「流畅的JS动画」（见下文）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;setInterval&quot;&gt;&lt;a href=&quot;#setInterval&quot; class=&quot;headerlink&quot; title=&quot;setInterval&quot;&gt;&lt;/a&gt;setInterval&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;setInterval如果使用「固定步长」（间隔时间为定值），例如200ms，那么它可能会在距离js执行开始的205ms，405ms，605ms…时将「事件」放入task queue中的末尾等待执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h4 id=&quot;问题一：&quot;&gt;&lt;a href=&quot;#问题一：&quot; class=&quot;headerlink&quot; title=&quot;问题一：&quot;&gt;&lt;/a&gt;问题一：&lt;/h4&gt;&lt;p&gt;如果主线程（或执行栈）中的任务与task queue中的其它任务再加上setInterval中的回调函数的总执行时间超过了「固定步长」（200ms），那么setInterval的回调函数就会「延后执行」，浏览器会保证&lt;strong&gt;「当任务队列中没有定时器的任何其它代码实例时，才将新的定时器添加到任务队列」&lt;/strong&gt;，长时间运行就会产生大量「积压」在内存中待执行的函数，如果主线程终于空闲下来，那么就会立刻执行&lt;strong&gt;「积压」&lt;/strong&gt;的大量函数，中间不会有任何停顿。那么真正的执行时间可能就变成了（假设主线程执行时间每loop固定为300ms）：305ms、605ms、605ms、905ms、1205ms、1205ms…就会产生&lt;strong&gt;「跳帧」&lt;/strong&gt;。例子如下：（补充：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Code_snippets/Timers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Date.now&lt;/a&gt; IE9以上支持，相对new Date()来说减少创建一次对象的时间和内存）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, itv;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;btnclick&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	itv = setInterval(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;run:&#39;&lt;/span&gt;+i++);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; start = &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now() - start &amp;lt; &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;, &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;但在试验中（ff，chrome，safari），只有firefox发生了「积压」效果&lt;/strong&gt;，具体表现为：会有几个「run:i」同时打印到控制台。推测是webkit内核对这块做了优化。如果一定要使用setInterval的话，问题一（避免事件积压）的解决办法有（摘自『javascript高级程序设计』）：&lt;br&gt;(1) 间隔时间使用百分比: 开始值 + (目标值 - 开始值) * （Date.now() - 开始时间）/ 时间区间；&lt;br&gt;(2) 使用链式setTimeout；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;问题二：&quot;&gt;&lt;a href=&quot;#问题二：&quot; class=&quot;headerlink&quot; title=&quot;问题二：&quot;&gt;&lt;/a&gt;问题二：&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;「setTimeout同样有这个问题！」&lt;/strong&gt;通过切换标签页等操作让页面在后台运行，循环仍在继续，只是「时间间隔变长」了而已。另外，当动画发生在页面viewport可视区域以外的时候，中断动画运行，才是性能更优的选择（raf就是如此）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h4 id=&quot;问题三：&quot;&gt;&lt;a href=&quot;#问题三：&quot; class=&quot;headerlink&quot; title=&quot;问题三：&quot;&gt;&lt;/a&gt;问题三：&lt;/h4&gt;&lt;p&gt;在使用setTimeout制作JS动画的时候，时间间隔是不好把握的，如果假设某浏览器的渲染速率为60Hz，那么就是16又2/3毫秒渲染一次，为了匹配这个速率，我们需要确保「setTimeout中设定的时间间隔」+「回调函数执行时间」+「在显示器上绘制/改变动画的下一帧的时间」刚好等于「16 2/3ms」，假设3者相加时间为15ms，那么每10『(16 2/3) / ((16 2/3)- 15)=10』帧会多出一帧来，那么结果就是在第10帧的时候，动画函数连续执行了两次，于是动画不再平滑了…（详见&lt;a href=&quot;https://lists.webkit.org/pipermail/webkit-dev/2011-September/018095.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇啰嗦的文章&lt;/a&gt;），更不要说还要考虑setTimeout的「时间精度」问题（4ms 一次 event loop，也即是最少4ms才检查一次setTimeout的时间是否达到）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;requestAnimationFrame&quot;&gt;&lt;a href=&quot;#requestAnimationFrame&quot; class=&quot;headerlink&quot; title=&quot;requestAnimationFrame&quot;&gt;&lt;/a&gt;requestAnimationFrame&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;requestAnimationFrame 会把每一帧中的所有DOM操作集中起来，在&lt;strong&gt;「一次重绘或回流中就完成」&lt;/strong&gt;，并且&lt;strong&gt;「重绘或回流的时间间隔紧紧跟随浏览器的刷新频率」&lt;/strong&gt;，一般来说，这个频率为每秒60帧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在隐藏或不可见的元素中，requestAnimationFrame将不会进行重绘或回流，这当然就意味着更少的的cpu，gpu和内存使用量。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, _load = +&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(), loop = &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _now = +&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i++, (_now-_load)/loop);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _load = _now;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    requestAnimationFrame(f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;与setTimeout相比，requestAnimationFrame不是自己指定回调函数运行的时间，而是跟着浏览器内建的刷新频率来执行回调，这当然就能达到浏览器所能实现动画的最佳效果了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;但另外一方面，requestAnimationFrame的预期执行时间要比setTimeout要长，因为setTimeout的最小执行时间是由「第7点：浏览器的时间精度」决定的，但raf会跟随浏览器DOM的刷新频率来执行，理论为16 2/3ms。但是，&lt;strong&gt;在setTimeout中如果进行了DOM操作（尤其是产生了重绘）通常不会立即执行，而是等待浏览器内建刷新时才执行&lt;/strong&gt;。因此对于「动画」来说的话，raf要远远比setTimeout适合得多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rAF与setTimeout性能比较：（据某些人说，早期的raf性能堪忧，尤其是在手机上，反而不如setTimeout）&lt;br&gt;&lt;strong&gt;macbook pro chrome 46.0.2490.86 (64-bit)：&lt;/strong&gt;&lt;br&gt;(1) setTimeout用时：37280ms&lt;br&gt;(2) raf用时：       18360ms  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;setTimeout:&lt;/strong&gt;  &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; raf, i= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, body = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;body&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;body.innerHTML = &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;div id=&quot;sq&quot; style=&quot;position:fixed;width:30px;height:30px;top:50px;left:50px;background:red;&quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sq = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;#sq&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pause = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//回调函数执行时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _load = +&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; t = &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run1&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sq.style.left = sq.offsetLeft + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&#39;px&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; start = &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now() - start &amp;lt; pause) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i == &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now() - _load);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    raf = setTimeout(run1, t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stop&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clearTimeout(raf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//37280&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;rAF:&lt;/strong&gt;  &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; raf, i= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, body = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;body&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;body.innerHTML = &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;div id=&quot;sq&quot; style=&quot;position:fixed;width:30px;height:30px;top:50px;left:50px;background:red;&quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sq = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;#sq&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pause = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//回调函数执行时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _load = +&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sq.style.left = sq.offsetLeft + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&#39;px&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; start = &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now() - start &amp;lt; pause) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i == &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now() - _load);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    raf = requestAnimationFrame(run);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stop&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cancelAnimationFrame(raf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//18360&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;由于requestAnimationFrame的特性之一：会把每一帧中的所有DOM操作集中起来，在「一次重绘或回流中就完成」。因此有github项目fastdom，我会在另一篇文章中详细分析fastdom的实现思路与代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;四、更快的异步执行&quot;&gt;&lt;a href=&quot;#四、更快的异步执行&quot; class=&quot;headerlink&quot; title=&quot;四、更快的异步执行&quot;&gt;&lt;/a&gt;四、更快的异步执行&lt;/h3&gt;&lt;p&gt;&lt;em&gt;不是为了「动画」，而是单纯的希望最快速的执行异步回调：&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;使用异步函数：setTimeout、raf、setImmediate：&quot;&gt;&lt;a href=&quot;#使用异步函数：setTimeout、raf、setImmediate：&quot; class=&quot;headerlink&quot; title=&quot;使用异步函数：setTimeout、raf、setImmediate：&quot;&gt;&lt;/a&gt;使用异步函数：setTimeout、raf、setImmediate：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;setTimeout会有「时间精度问题」，经过本地试验，chrome用时约1.5ms（连接电源）、safari用时约5ms、firefox用时约0.3ms（为何这么快…）&lt;/li&gt;
&lt;li&gt;raf会跟随浏览器内置重绘页面的频率，约60Hz，理论上平均时间为：1000/60/2ms，chrome上测试：第一次时间多在1ms内，第二次调用时间大于10ms。&lt;/li&gt;
&lt;li&gt;setImmediate：仅IE10支持，尚未成为标准。但nodeJS已经支持并推荐使用此方法。另外，github上有&lt;a href=&quot;https://github.com/YuzuJS/setImmediate/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;setImmediate.js项目&lt;/a&gt;，用其它方法实现了setImmediate功能&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;测试：&lt;br&gt;&lt;strong&gt;setTimeout:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; now = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; performance ? performance.now() : +&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = now();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(now()-j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j = now();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(j-i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;raf:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; now = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; performance ? performance.now() : +&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = now();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;requestAnimationFrame(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    requestAnimationFrame(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(now()-j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j = now();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(j-i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;其它方式实现异步调用：&quot;&gt;&lt;a href=&quot;#其它方式实现异步调用：&quot; class=&quot;headerlink&quot; title=&quot;其它方式实现异步调用：&quot;&gt;&lt;/a&gt;其它方式实现异步调用：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;onmessage：和iframe通信时常常会使用到onmessage方法，但是如果同一个window postMessage给自身，其实也相当于异步执行了一个function。  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; doSth = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&quot;message&quot;&lt;/span&gt;, doSth, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.postMessage(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;另外，还可以利用script标签，实现函数异步执行（把script添加到文档也会执行onreadystatechange 但是该方法只能在IE下浏览器里使用），例如：  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; newScript = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;script&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newScript.onreadystatechange = doSth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement.appendChild(newScript);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;理论上，执行回调函数的等待时间排序：&lt;br&gt;&lt;strong&gt;setImmediate &amp;lt; readystatechange &amp;lt; onmessage &amp;lt; setTimeout 0 &amp;lt; requestAnimationFrame&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;另外，在&lt;strong&gt;「&lt;a href=&quot;https://github.com/YuzuJS/setImmediate/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;setImmediate.js项目&lt;/a&gt;」&lt;/strong&gt;中说了它的实现策略，对上文进行一个有力的补充：  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## The Tricks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### `process.nextTick`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In Node.js versions &lt;span class=&quot;keyword&quot;&gt;below&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.9&lt;/span&gt;, `setImmediate` &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; available, &lt;span class=&quot;keyword&quot;&gt;but&lt;/span&gt; [`process.nextTick`][nextTick] &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt;—&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; those versions, `process.nextTick` uses macrotask semantics. So, we use &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; shim support &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; `setImmediate`.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In Node.js &lt;span class=&quot;number&quot;&gt;0.9&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;above&lt;/span&gt;, `process.nextTick` moved &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; microtask semantics, &lt;span class=&quot;keyword&quot;&gt;but&lt;/span&gt; `setImmediate` was introduced &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; macrotask semantics, so there&#39;s no need &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; polyfill anything.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; we check &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; *actual* Node.js environments, &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; emulated ones like those produced &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; browserify &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; similar. Such emulated environments often already include a `process.nextTick` shim &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;&#39;s &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; browser-compatible &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; setImmediate.js.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### `postMessage`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In Firefox &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;+, Internet Explorer &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;+, all modern WebKit browsers, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; Opera &lt;span class=&quot;number&quot;&gt;9.5&lt;/span&gt;+, [`postMessage`][postMessage] &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; available &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; provides a good way &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; queue tasks &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; event loop. It&#39;s quite &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; abuse, using a cross-document messaging protocol within &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; same document simply &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; access &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; event loop task queue, &lt;span class=&quot;keyword&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;until&lt;/span&gt; there are native implementations, this &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; best option.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; Internet Explorer &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; includes a synchronous &lt;span class=&quot;built_in&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; `postMessage`. We detect this, &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; any other such synchronous implementation, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; fall &lt;span class=&quot;keyword&quot;&gt;back&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; another trick.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### `MessageChannel`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Unfortunately, `postMessage` has completely different semantics inside web workers, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; so cannot be used there. So we turn &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; [`MessageChannel`][MessageChannel], which has worse browser support, &lt;span class=&quot;keyword&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;does&lt;/span&gt; work inside a web worker.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### `&amp;lt;script&amp;gt; onreadystatechange`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For our &lt;span class=&quot;keyword&quot;&gt;last&lt;/span&gt; trick, we pull something out &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; make things fast &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Internet Explorer versions &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;through&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;: namely, creating a `&amp;lt;&lt;span class=&quot;keyword&quot;&gt;script&lt;/span&gt;&amp;gt;` element &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; firing our calls &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;its&lt;/span&gt; `onreadystatechange` event. This &lt;span class=&quot;keyword&quot;&gt;does&lt;/span&gt; execute &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; a future turn &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; event loop, &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; also faster than `setTimeout(…, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)`, so hey, why &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;setImmediate-API：未完待续…&quot;&gt;&lt;a href=&quot;#setImmediate-API：未完待续…&quot; class=&quot;headerlink&quot; title=&quot;setImmediate API：未完待续…&quot;&gt;&lt;/a&gt;setImmediate API：未完待续…&lt;/h3&gt;&lt;h3 id=&quot;部分参考资料：&quot;&gt;&lt;a href=&quot;#部分参考资料：&quot; class=&quot;headerlink&quot; title=&quot;部分参考资料：&quot;&gt;&lt;/a&gt;部分参考资料：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;JavaScript 运行机制详解：再谈Event Loop&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/10/event-loop.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2014/10/event-loop.html&lt;/a&gt;&lt;br&gt;—相关视频：Help, I’m stuck in an event-loop  &lt;a href=&quot;https://vimeo.com/96425312&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://vimeo.com/96425312&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更快的异步执行&lt;br&gt;&lt;a href=&quot;http://www.alloyteam.com/2014/03/faster-asynchronous-execution/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.alloyteam.com/2014/03/faster-asynchronous-execution/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable REQUEST_ANIMATION_FRAME on all ports?&lt;br&gt;&lt;a href=&quot;https://lists.webkit.org/pipermail/webkit-dev/2011-September/018095.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://lists.webkit.org/pipermail/webkit-dev/2011-September/018095.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拥有更好性能的requesAnimationFrame&lt;br&gt;&lt;a href=&quot;http://sentsin.com/web/949.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://sentsin.com/web/949.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;性能更好的js动画实现方式——requestAnimationFrame&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/2050/p/3871517.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/2050/p/3871517.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;by &lt;a href=&quot;https://tianyn1990.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tianyn1990&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文是在看过一些文章和视频之后，结合自己的理解，做的一个汇总，如果发现理解错误的地方，请及时指出便于更正。&lt;/em&gt; &lt;strong&gt;Orz&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;一、单线程&quot;&gt;&lt;a href=&quot;#一、单线程&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>事件循环-&gt;布局颠簸-&gt;动画性能</title>
    <link href="http://yoursite.com/2016/01/14/%E5%B8%83%E5%B1%80%E9%A2%A0%E7%B0%B8/"/>
    <id>http://yoursite.com/2016/01/14/布局颠簸/</id>
    <published>2016-01-14T08:57:06.000Z</published>
    <updated>2016-06-17T15:19:50.605Z</updated>
    
    <content type="html">&lt;!--# 事件循环-&gt;布局颠簸-&gt;动画性能--&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tianyn1990.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tianyn1990&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、事件循环-amp-定时器&quot;&gt;&lt;a href=&quot;#一、事件循环-amp-定时器&quot; class=&quot;headerlink&quot; title=&quot;一、事件循环&amp;amp;定时器&quot;&gt;&lt;/a&gt;一、事件循环&amp;amp;定时器&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;事件循环（Event Loop）&lt;/strong&gt; 是指浏览器通过不断循环检查任务队列，使单线程的javascript语言执行异步任务的过程 &lt;a href=&quot;http://kaola-fed.github.io/2016/01/05/JS%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%AE%9A%E6%97%B6%E5%99%A8/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章链接&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;上文的两张图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「定时器-问题三」、「requestAnimationFrame」：如果浏览器性能不佳，setTimeout发生跳帧（其实就算浏览器性能良好也会发生跳帧，不可避免），Raf会造成动画变慢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下文我们重点探讨的动画都是js动画&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;既然css3动画又快又好，还用js动画（包括svg）干嘛？原因大概包括如下一些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;css动画不能完全被js控制&lt;/li&gt;
&lt;li&gt;贝塞尔动画有局限（duang…duang..duang.duangduang）&lt;/li&gt;
&lt;li&gt;让css做个飞入购物车的抛物线？（同上2条）&lt;/li&gt;
&lt;li&gt;让css控制滚动条？（css只能改样式，不能控制浏览器行为）&lt;/li&gt;
&lt;li&gt;css会与js/html耦合&lt;/li&gt;
&lt;li&gt;大量使用GPU硬件加速，浏览器会高负荷运转&lt;/li&gt;
&lt;li&gt;GPU与CPU数据传输也需要时间&lt;/li&gt;
&lt;li&gt;兼容：IE10以下的浏览器不支持transition。而目前 IE8 和 IE9 还是很流行的&lt;/li&gt;
&lt;li&gt;传闻js动画经过良好优化后性能反而可超css3，见&lt;a href=&quot;http://zencode.in/19.CSS-vs-JS%E5%8A%A8%E7%94%BB%EF%BC%9A%E8%B0%81%E6%9B%B4%E5%BF%AB%EF%BC%9F.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;js动画库velocity.js作者文章，译文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用velocity.js的js动画举例 &lt;a href=&quot;http://julian.com/research/velocity/demo.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt; &lt;a href=&quot;http://danielraftery.com/lib/sandbox/animated-town/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，如果开发简单动画效果，css3仍是高性能的原生支持方案&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;补充：css3动画的回调&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;Raf虽然在保证了「浏览器刷新频率和DOM移动频率相互同步」的问题，但由于js动画性能不良(?)以及开发难度较高(!)，我们常常使用css3标准实现动画效果。&lt;/p&gt;
&lt;p&gt;由于帧率不确定造成了动画完成时间也不确定，因此使用setTimeout(cb,delay)的方式来执行css3动画的回调函数，可能造成提前或延后，且动画的css与js也发生了耦合。&lt;/p&gt;
&lt;p&gt;因此我们可以使用&lt;code&gt;transitionend&lt;/code&gt;、&lt;code&gt;animationstart&lt;/code&gt;、&lt;code&gt;animationiteration&lt;/code&gt;、&lt;code&gt;animationend&lt;/code&gt;事件。见&lt;a href=&quot;http://web.jobbole.com/84835/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;陆忠芳的早读&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;至于兼容性的问题，基本上兼容transition/animation的浏览器同时也兼容对应事件，因此也不必纠结！&lt;/p&gt;
&lt;h2 id=&quot;二、布局颠簸-amp-fastDOM&quot;&gt;&lt;a href=&quot;#二、布局颠簸-amp-fastDOM&quot; class=&quot;headerlink&quot; title=&quot;二、布局颠簸 &amp;amp; fastDOM&quot;&gt;&lt;/a&gt;二、布局颠簸 &amp;amp; fastDOM&lt;/h2&gt;&lt;h3 id=&quot;1、什么是？&quot;&gt;&lt;a href=&quot;#1、什么是？&quot; class=&quot;headerlink&quot; title=&quot;1、什么是？&quot;&gt;&lt;/a&gt;1、什么是？&lt;/h3&gt;&lt;p&gt;需要用到上文的知识&lt;/p&gt;
&lt;p&gt;如果在同一帧中，进行了「读-写-读」的操作，就会引发布局颠簸（Layout Thrashing），举个最经典的栗子：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Read&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; h1 = element1.clientHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Write (invalidates layout)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;element1.style.height = (h1 * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&#39;px&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Read (triggers layout)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; h2 = element2.clientHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Write (invalidates layout)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;element2.style.height = (h2 * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&#39;px&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当write操作发生以后，对应的布局就会失效，需要进行重新计算并reflow，浏览器原本会将这个「耗时」的操作放到下一次刷新中再统一进行一次reflow操作。&lt;/p&gt;
&lt;p&gt;而在上面的代码中，write之后接着进行了read，为了保证读取的数据是正确的，会迫使浏览器在当前这一帧中提前进行reflow，于是「布局颠簸」就产生了。&lt;/p&gt;
&lt;p&gt;如果这种事情在一帧中大量发生，那么对性能的影响是巨大的。可以参考一个例子&amp;gt;&amp;gt;todo:fastdom/**/aspect.html;&lt;/p&gt;
&lt;p&gt;上文中，我们了解到根据浏览器时间精度的不同，使用requestAnimationFrame所注册的一个异步任务（也就是回调函数）会在下一次浏览器检查异步任务队列的时候触发。&lt;/p&gt;
&lt;p&gt;如果这个回调进行了DOM操作，由于浏览器刷新（/repaint/layout 随便怎么称呼）一次的时间间隔一般都是1000/60ms，因此&lt;strong&gt;DOM操作也将在「下一帧」才能生效！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;于是我们可以改成这样：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Read&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; h1 = element1.clientHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Write (invalidates layout)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;element1.style.height = (h1 * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&#39;px&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;requestAnimationFrame(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Read&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; h2 = element2.clientHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Write (invalidates layout)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    element2.style.height = (h2 * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&#39;px&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在每一帧中，先执行所有read操作，再执行所有write操作，当有新的read操作需要发生在write之后执行时，我们将它移入到下一帧执行&lt;br&gt;（使用requestAnimationFrame，不兼容则用setTimeout(cb,0)）&lt;/p&gt;
&lt;p&gt;chrome也在Timeline中对强制同步操作（布局颠簸）进行了提示 &lt;a href=&quot;http://jiongks.name/blog/devtools-five-performance-features/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、「然而」来了&quot;&gt;&lt;a href=&quot;#2、「然而」来了&quot; class=&quot;headerlink&quot; title=&quot;2、「然而」来了&quot;&gt;&lt;/a&gt;2、「然而」来了&lt;/h3&gt;&lt;p&gt;然而，在现实生活中，没有人像上面那样写代码，并且：&lt;/p&gt;
&lt;p&gt;1）代码中经常读写操作穿插在一起，如果将读写操作分开，会打乱代码书写逻辑，造成程序员理解异常。还有的时候读写顺序无法改变&lt;/p&gt;
&lt;p&gt;2）代码都是按照模块解耦的，模块A在进行读操作的时候，并不知道在此时此刻的这一帧中，另一个模块X是否刚刚进行了写操作&lt;/p&gt;
&lt;p&gt;3）更重要的是，如果有多个js动画（包括svg动画）同时执行，有可能造成大量Layout Thrashing，严重影响动画性能&lt;/p&gt;
&lt;h3 id=&quot;3、如何解决？&quot;&gt;&lt;a href=&quot;#3、如何解决？&quot; class=&quot;headerlink&quot; title=&quot;3、如何解决？&quot;&gt;&lt;/a&gt;3、如何解决？&lt;/h3&gt;&lt;p&gt;首先，对于动画来说，缓存动画元素的各种属性值，尽量在动画开始的时候进行一次读操作就可以了，一般动画都是这样做的，&lt;/p&gt;
&lt;p&gt;但需要注意的是，在链式动画过程中，前一个动画的结尾属性也需要缓存，以减少下一个动画的读操作。&lt;/p&gt;
&lt;p&gt;但这还不够，在各种非动画场景下，我们也会经常大量的操作DOM（使用jquery或nej），LT不可避免。&lt;/p&gt;
&lt;p&gt;于是类似fastDom.js这样的框架就出现了，它的原理就是利用requestAnimationFrame，将会产生LT的部分挪到下一帧中再执行，&lt;br&gt;而在同一帧中，先批量执行所有读操作，再批量执行写操作。&lt;/p&gt;
&lt;p&gt;具体请看：&lt;/p&gt;
&lt;p&gt;例子&amp;gt;&amp;gt;todo:fastdom/**/test.simple.fastdom.html;&lt;/p&gt;
&lt;p&gt;源码&amp;gt;&amp;gt;todo:fastdom/**/fastdom.js;&lt;/p&gt;
&lt;h3 id=&quot;4、实际运用fastdom&quot;&gt;&lt;a href=&quot;#4、实际运用fastdom&quot; class=&quot;headerlink&quot; title=&quot;4、实际运用fastdom&quot;&gt;&lt;/a&gt;4、实际运用fastdom&lt;/h3&gt;&lt;p&gt;有个小哥在项目中用了fastdom，这里是他的&lt;a href=&quot;https://mattandre.ws/2014/05/really-fixing-layout-thrashing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;经验教训&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;他还将这个思想运用到了组件接口的设计中。&lt;a href=&quot;https://github.com/ftlabs/ftellipsis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个&lt;/a&gt;&lt;br&gt;项目尝试分离了读&amp;amp;写的API（calc读，set写），来帮助使用者合理控制读写，但在大量使用读写时，仍无法保证不触发LT。&lt;/p&gt;
&lt;p&gt;他还遭遇了另一个问题，由于使用的是单页面app，有时候在移除一些组件的时候，组件节点直接被移除了，&lt;br&gt;但fastdom将DOM操作放到了一下帧，当执行的时候发现组件节点已不存在，于是报错。&lt;br&gt;他们最后通过实例化fastdom，并扩展了一个clear方法（取名&lt;a href=&quot;https://github.com/orangemug/instantiable-fastdom&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;instantiable-fastdom&lt;/a&gt;）&lt;br&gt;来解决。&lt;/p&gt;
&lt;p&gt;另外fastdom在后来的版本中直接try-catch掉了这种异常。&lt;/p&gt;
&lt;h2 id=&quot;三、动画性能&quot;&gt;&lt;a href=&quot;#三、动画性能&quot; class=&quot;headerlink&quot; title=&quot;三、动画性能&quot;&gt;&lt;/a&gt;三、动画性能&lt;/h2&gt;&lt;p&gt;由于只做了很少的性能测试，也没有深入了解一些动画框架的原理，因此只能总结一点简单的理解。&lt;/p&gt;
&lt;h3 id=&quot;js动画&quot;&gt;&lt;a href=&quot;#js动画&quot; class=&quot;headerlink&quot; title=&quot;js动画&quot;&gt;&lt;/a&gt;js动画&lt;/h3&gt;&lt;p&gt;在解决布局颠簸问题，并且缓存各种状态之后，我们还有以下可能提升性能的地方：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;忽略过于微小甚至不可见的状态改变（&amp;lt;1px）&lt;/li&gt;
&lt;li&gt;根据实际情况主动触发GPU硬件加速&lt;/li&gt;
&lt;li&gt;raf&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;css动画&quot;&gt;&lt;a href=&quot;#css动画&quot; class=&quot;headerlink&quot; title=&quot;css动画&quot;&gt;&lt;/a&gt;css动画&lt;/h3&gt;&lt;p&gt;上面虽然列举了一系列的问题，但css动画还是又快又好。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://events.google.com/io2015/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2015 Google I/0 的官方站点&lt;/a&gt;中，&lt;br&gt;使用了一种被称作FLIP的原则开发动画效果&lt;a href=&quot;https://github.com/FrontendMagazine/Works/blob/master/archive/flip-your-animation.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接，译文&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;!--# 事件循环-&gt;布局颠簸-&gt;动画性能--&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tianyn1990.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tianyn1990&lt;/a&gt;&lt;/p&gt;
&lt;/blockquo
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="fastdom" scheme="http://yoursite.com/tags/fastdom/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>HTML语义化</title>
    <link href="http://yoursite.com/2016/01/05/HTML%E8%AF%AD%E4%B9%89%E5%8C%96/"/>
    <id>http://yoursite.com/2016/01/05/HTML语义化/</id>
    <published>2016-01-05T13:25:43.000Z</published>
    <updated>2016-06-17T15:19:50.552Z</updated>
    
    <content type="html">&lt;p&gt;&lt;em&gt;面试的时候，我有时候会问面试者 &lt;strong&gt;你对HTML语义化的理解&lt;/strong&gt; 这样一题。我期待的回答起码包括：什么是语义化 ，为什么要语义化或者语义化有什么作用这样两部分，如果能举一些语义化标签的使用场景就更完美了。对HTML标签语义化的理解和实践，作为我们每个前端攻城狮的一个必备技能和自我要求，好么？&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;语义化-What-Why&quot;&gt;&lt;a href=&quot;#语义化-What-Why&quot; class=&quot;headerlink&quot; title=&quot;语义化 What + Why&quot;&gt;&lt;/a&gt;语义化 &lt;code&gt;What + Why&lt;/code&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;语义化是前端开发里面的一个专用术语，其优点在于标签语义化有助于构架良好的html结构，有利于搜索引擎的建立索引、抓取；另外，亦有利于页面在不同的设备上显示尽可能相同；此外，亦有利于构建清晰的机构，有利于团队的开发、维护。    —— &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%AF%AD%E4%B9%89%E5%8C%96&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上，很官方的解释，而且重点在说标签语义化的作用了。&lt;br&gt;其实，通俗的说，语义化就是用正确的&lt;strong&gt;标签&lt;/strong&gt;做正确的事情，表达正确的意思。浏览器很包容，即使你用非语义的标签，再用CSS披上一层外衣，也可以达到语义标签的效果，但这样真的好么？当然不好！&lt;br&gt;首先，我们写的代码&lt;strong&gt;不是只给你自己看的&lt;/strong&gt;。通篇DIV标签，你考虑过小伙伴们的感受么？有时候维护别人的代码，比推倒重写更难受，没错，就是难受。一份好的HTML代码，应该是正确嵌套、语义明确、结构清晰、合理缩进加必要的注释。&lt;br&gt;再者，我们写的代码除了给用户看到最终的效果，&lt;strong&gt;也要让机器能更好的识别&lt;/strong&gt;。 最重要的就是要对搜索引擎友好，尤其做电商类网站，&lt;em&gt;SEO&lt;/em&gt;更为重要，好的排名能给网站带来更多流量。另外还有针对有视觉障碍的用户使用的屏幕阅读器，也要考虑到web可访问性&lt;a href=&quot;http://www.w3.org/standards/webdesign/accessibility&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Accessibility&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果用对了标签，即使有一天你的网页&lt;strong&gt;裸奔&lt;/strong&gt;了，在没有CCS的情况下，也能以一定的文档格式显示（浏览器对各个标签都有默认的样式），并且是容易阅读的。编写网页代码的时候，要从设计稿（视觉稿or交互稿）中明确语义，是标题就用&lt;code&gt;h1-h6&lt;/code&gt;，是段落就用&lt;code&gt;p&lt;/code&gt;，是列表就该考虑用&lt;code&gt;ul+li&lt;/code&gt;、&lt;code&gt;ol+li&lt;/code&gt;或&lt;code&gt;dl+dt+dd&lt;/code&gt;…&lt;/p&gt;
&lt;h3 id=&quot;语义化实战&quot;&gt;&lt;a href=&quot;#语义化实战&quot; class=&quot;headerlink&quot; title=&quot;语义化实战&quot;&gt;&lt;/a&gt;语义化实战&lt;/h3&gt;&lt;p&gt;想要用对标签，先要理解标签：&lt;a href=&quot;http://www.w3school.com.cn/tags/index.asp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML标签大全&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../../../uploads/images/html1.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;图标&lt;/strong&gt;：适合放图标的标签（行内标签且简短）（不考虑兼容性，可以用before | after伪元素）&lt;br&gt;    | 标签       |     描述         |&lt;br&gt;    | :——–   | ——–   |&lt;br&gt;    | b            |定义粗体字    |&lt;br&gt;    | i         |定义斜体字    |&lt;br&gt;    | em        |定义强调文本   |&lt;br&gt;    | span        |定义文档中的节 |&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;按钮&lt;/strong&gt;：如果是表单中的按钮，推荐&lt;code&gt;button&lt;/code&gt;或&lt;code&gt;input&lt;/code&gt;并设置type属性，其他情况也可以用&lt;code&gt;a&lt;/code&gt;、&lt;code&gt;b&lt;/code&gt;等行内标签模拟按钮&lt;br&gt;&lt;strong&gt;图片&lt;/strong&gt;：&lt;code&gt;img&lt;/code&gt;标签，注意设置&lt;code&gt;alt&lt;/code&gt;属性&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/images/demo.png&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;demo展示&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果图片中包含了重要信息，最好也写到标签里再用样式隐藏掉。比如考拉的商品详情页，商品信息都是图片来展示的，这对seo很不利，应该把图片中重要的信息写到标签里并且隐藏掉，图片不能完全替代网页元素，这也是应该养成的习惯。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/images/goodinfo.png&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;商品信息&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;display:none;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;此处展示图片中的信息&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图片新标签&lt;/strong&gt;：&lt;code&gt;figure&lt;/code&gt; 属于 html5，语义是文档中的插图&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;figure&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;黄浦江上的的卢浦大桥&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;shanghai_lupu_bridge.jpg&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;figure&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表单&lt;/strong&gt;：整个结构是个完整的表单语义，要用&lt;code&gt;form&lt;/code&gt;标签，登录|注册表单、完善信息表单、消息发送表单等等。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;m-loginfm&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;account&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;account&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;account&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;登录&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/register&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;去注册&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表格&lt;/strong&gt;：大型的数据表格用table，一些形似表格非严格意义上的表格可以用别的标签加样式来实现，因为表格本身渲染耗性能，而且结构比较深，样式也不够灵活。比较完整的表格结构：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;caption&lt;/span&gt;&amp;gt;&lt;/span&gt;Monthly savings&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;caption&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;thead&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;Month&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;Savings&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;thead&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tfoot&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;Sum&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;$180&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tfoot&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tbody&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;5月&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;$120&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;6月&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;$60&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tbody&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;列表&lt;/strong&gt;：无序列表（&lt;code&gt;ul &amp;gt; li&lt;/code&gt;）、有序列表（&lt;code&gt;ol &amp;gt; li&lt;/code&gt;）、定义列表（&lt;code&gt;dl &amp;gt; dt + dd&lt;/code&gt;），不要嵌套错误&lt;br&gt;&lt;img src=&quot;../../../../uploads/images/html2.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;html5新标签&lt;/strong&gt;：移动端开发可以大胆用起来，PC端兼容方案：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--[if lt IE 9]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var html5 = &quot;abbr,article,aside,audio,canvas,datalist,details,dialog,eventsource,figure,footer,header,hgroup,mark,menu,meter,nav,output,progress,section,time,video&quot;.split(&#39;,&#39;),i = html5.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while(i--) document.createElement(html5[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;![endif]--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;html5的布局标签&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;标签&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;header&lt;/td&gt;
&lt;td&gt;定义页眉&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;footer&lt;/td&gt;
&lt;td&gt;定义页脚&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;section&lt;/td&gt;
&lt;td&gt;定义节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;article&lt;/td&gt;
&lt;td&gt;定义文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;aside&lt;/td&gt;
&lt;td&gt;定义页面内容之外的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;nav&lt;/td&gt;
&lt;td&gt;定义导航链接&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&quot;../../../../uploads/images/html3.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最后，让HTML语义化镌刻进我们前端开发者的基因里，让书写正确的标签，成为下意识的行为。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;面试的时候，我有时候会问面试者 &lt;strong&gt;你对HTML语义化的理解&lt;/strong&gt; 这样一题。我期待的回答起码包括：什么是语义化 ，为什么要语义化或者语义化有什么作用这样两部分，如果能举一些语义化标签的使用场景就更完美了。对HTML标签语义化的理解和实践，作
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
</feed>
