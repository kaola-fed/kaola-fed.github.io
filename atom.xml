<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[网易考拉前端Team]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-01-14T09:14:26.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[前端团队]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[事件循环->布局颠簸->动画性能]]></title>
    <link href="http://yoursite.com/2016/01/14/%E5%B8%83%E5%B1%80%E9%A2%A0%E7%B0%B8/"/>
    <id>http://yoursite.com/2016/01/14/布局颠簸/</id>
    <published>2016-01-14T08:57:06.000Z</published>
    <updated>2016-01-14T09:14:26.000Z</updated>
    <content type="html"><![CDATA[<!--# 事件循环->布局颠簸->动画性能-->
<blockquote>
<p><a href="http://tianyn1990.github.io" target="_blank" rel="external">tianyn1990</a></p>
</blockquote>
<h2 id="u4E00_u3001_u4E8B_u4EF6_u5FAA_u73AF_26amp_3B_u5B9A_u65F6_u5668"><a href="#u4E00_u3001_u4E8B_u4EF6_u5FAA_u73AF_26amp_3B_u5B9A_u65F6_u5668" class="headerlink" title="一、事件循环&amp;定时器"></a>一、事件循环&amp;定时器</h2><p><strong>事件循环（Event Loop）</strong> 是指浏览器通过不断循环检查任务队列，使单线程的javascript语言执行异步任务的过程 <a href="http://kaola-fed.github.io/2016/01/05/JS%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%AE%9A%E6%97%B6%E5%99%A8/" target="_blank" rel="external">文章链接</a></p>
<ol>
<li><p>上文的两张图</p>
</li>
<li><p>「定时器-问题三」、「requestAnimationFrame」：如果浏览器性能不佳，setTimeout发生跳帧（其实就算浏览器性能良好也会发生跳帧，不可避免），Raf会造成动画变慢</p>
</li>
<li><p>下文我们重点探讨的动画都是js动画</p>
</li>
<li><p>既然css3动画又快又好，还用js动画（包括svg）干嘛？原因大概包括如下一些：</p>
<ul>
<li>css动画不能完全被js控制</li>
<li>贝塞尔动画有局限（duang…duang..duang.duangduang）</li>
<li>让css做个飞入购物车的抛物线？（同上2条）</li>
<li>让css控制滚动条？（css只能改样式，不能控制浏览器行为）</li>
<li>css会与js/html耦合</li>
<li>大量使用GPU硬件加速，浏览器会高负荷运转</li>
<li>GPU与CPU数据传输也需要时间</li>
<li>兼容：IE10以下的浏览器不支持transition。而目前 IE8 和 IE9 还是很流行的</li>
<li>传闻js动画经过良好优化后性能反而可超css3，见<a href="http://zencode.in/19.CSS-vs-JS%E5%8A%A8%E7%94%BB%EF%BC%9A%E8%B0%81%E6%9B%B4%E5%BF%AB%EF%BC%9F.html" target="_blank" rel="external">js动画库velocity.js作者文章，译文</a></li>
<li>使用velocity.js的js动画举例 <a href="http://julian.com/research/velocity/demo.html" target="_blank" rel="external">demo</a> <a href="http://danielraftery.com/lib/sandbox/animated-town/" target="_blank" rel="external">demo2</a></li>
</ul>
</li>
</ol>
<p>当然，如果开发简单动画效果，css3仍是高性能的原生支持方案</p>
<p><strong>补充：css3动画的回调</strong>：</p>
<p>Raf虽然在保证了「浏览器刷新频率和DOM移动频率相互同步」的问题，但由于js动画性能不良(?)以及开发难度较高(!)，我们常常使用css3标准实现动画效果。</p>
<p>由于帧率不确定造成了动画完成时间也不确定，因此使用setTimeout(cb,delay)的方式来执行css3动画的回调函数，可能造成提前或延后，且动画的css与js也发生了耦合。</p>
<p>因此我们可以使用<code>transitionend</code>、<code>animationstart</code>、<code>animationiteration</code>、<code>animationend</code>事件。见<a href="http://web.jobbole.com/84835/" target="_blank" rel="external">陆忠芳的早读</a></p>
<p>至于兼容性的问题，基本上兼容transition/animation的浏览器同时也兼容对应事件，因此也不必纠结！</p>
<h2 id="u4E8C_u3001_u5E03_u5C40_u98A0_u7C38__26amp_3B_fastDOM"><a href="#u4E8C_u3001_u5E03_u5C40_u98A0_u7C38__26amp_3B_fastDOM" class="headerlink" title="二、布局颠簸 &amp; fastDOM"></a>二、布局颠簸 &amp; fastDOM</h2><h3 id="1_u3001_u4EC0_u4E48_u662F_uFF1F"><a href="#1_u3001_u4EC0_u4E48_u662F_uFF1F" class="headerlink" title="1、什么是？"></a>1、什么是？</h3><p>需要用到上文的知识</p>
<p>如果在同一帧中，进行了「读-写-读」的操作，就会引发布局颠簸（Layout Thrashing），举个最经典的栗子：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Read</span></span><br><span class="line"><span class="keyword">var</span> h1 = element1.clientHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write (invalidates layout)</span></span><br><span class="line">element1.style.height = (h1 * <span class="number">2</span>) + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read (triggers layout)</span></span><br><span class="line"><span class="keyword">var</span> h2 = element2.clientHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write (invalidates layout)</span></span><br><span class="line">element2.style.height = (h2 * <span class="number">2</span>) + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure>
<p>当write操作发生以后，对应的布局就会失效，需要进行重新计算并reflow，浏览器原本会将这个「耗时」的操作放到下一次刷新中再统一进行一次reflow操作。</p>
<p>而在上面的代码中，write之后接着进行了read，为了保证读取的数据是正确的，会迫使浏览器在当前这一帧中提前进行reflow，于是「布局颠簸」就产生了。</p>
<p>如果这种事情在一帧中大量发生，那么对性能的影响是巨大的。可以参考一个例子&gt;&gt;todo:fastdom/**/aspect.html;</p>
<p>上文中，我们了解到根据浏览器时间精度的不同，使用requestAnimationFrame所注册的一个异步任务（也就是回调函数）会在下一次浏览器检查异步任务队列的时候触发。</p>
<p>如果这个回调进行了DOM操作，由于浏览器刷新（/repaint/layout 随便怎么称呼）一次的时间间隔一般都是1000/60ms，因此<strong>DOM操作也将在「下一帧」才能生效！</strong></p>
<p>于是我们可以改成这样：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Read</span></span><br><span class="line"><span class="keyword">var</span> h1 = element1.clientHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write (invalidates layout)</span></span><br><span class="line">element1.style.height = (h1 * <span class="number">2</span>) + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">requestAnimationFrame(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read</span></span><br><span class="line">    <span class="keyword">var</span> h2 = element2.clientHeight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write (invalidates layout)</span></span><br><span class="line">    element2.style.height = (h2 * <span class="number">2</span>) + <span class="string">'px'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在每一帧中，先执行所有read操作，再执行所有write操作，当有新的read操作需要发生在write之后执行时，我们将它移入到下一帧执行<br>（使用requestAnimationFrame，不兼容则用setTimeout(cb,0)）</p>
<p>chrome也在Timeline中对强制同步操作（布局颠簸）进行了提示 <a href="http://jiongks.name/blog/devtools-five-performance-features/" target="_blank" rel="external">链接</a></p>
<h3 id="2_u3001_u300C_u7136_u800C_u300D_u6765_u4E86"><a href="#2_u3001_u300C_u7136_u800C_u300D_u6765_u4E86" class="headerlink" title="2、「然而」来了"></a>2、「然而」来了</h3><p>然而，在现实生活中，没有人像上面那样写代码，并且：</p>
<p>1）代码中经常读写操作穿插在一起，如果将读写操作分开，会打乱代码书写逻辑，造成程序员理解异常。还有的时候读写顺序无法改变</p>
<p>2）代码都是按照模块解耦的，模块A在进行读操作的时候，并不知道在此时此刻的这一帧中，另一个模块X是否刚刚进行了写操作</p>
<p>3）更重要的是，如果有多个js动画（包括svg动画）同时执行，有可能造成大量Layout Thrashing，严重影响动画性能</p>
<h3 id="3_u3001_u5982_u4F55_u89E3_u51B3_uFF1F"><a href="#3_u3001_u5982_u4F55_u89E3_u51B3_uFF1F" class="headerlink" title="3、如何解决？"></a>3、如何解决？</h3><p>首先，对于动画来说，缓存动画元素的各种属性值，尽量在动画开始的时候进行一次读操作就可以了，一般动画都是这样做的，</p>
<p>但需要注意的是，在链式动画过程中，前一个动画的结尾属性也需要缓存，以减少下一个动画的读操作。</p>
<p>但这还不够，在各种非动画场景下，我们也会经常大量的操作DOM（使用jquery或nej），LT不可避免。</p>
<p>于是类似fastDom.js这样的框架就出现了，它的原理就是利用requestAnimationFrame，将会产生LT的部分挪到下一帧中再执行，<br>而在同一帧中，先批量执行所有读操作，再批量执行写操作。</p>
<p>具体请看：</p>
<p>例子&gt;&gt;todo:fastdom/**/test.simple.fastdom.html;</p>
<p>源码&gt;&gt;todo:fastdom/**/fastdom.js;</p>
<h3 id="4_u3001_u5B9E_u9645_u8FD0_u7528fastdom"><a href="#4_u3001_u5B9E_u9645_u8FD0_u7528fastdom" class="headerlink" title="4、实际运用fastdom"></a>4、实际运用fastdom</h3><p>有个小哥在项目中用了fastdom，这里是他的<a href="https://mattandre.ws/2014/05/really-fixing-layout-thrashing/" target="_blank" rel="external">经验教训</a>。</p>
<p>他还将这个思想运用到了组件接口的设计中。<a href="https://github.com/ftlabs/ftellipsis" target="_blank" rel="external">这个</a><br>项目尝试分离了读&amp;写的API（calc读，set写），来帮助使用者合理控制读写，但在大量使用读写时，仍无法保证不触发LT。</p>
<p>他还遭遇了另一个问题，由于使用的是单页面app，有时候在移除一些组件的时候，组件节点直接被移除了，<br>但fastdom将DOM操作放到了一下帧，当执行的时候发现组件节点已不存在，于是报错。<br>他们最后通过实例化fastdom，并扩展了一个clear方法（取名<a href="https://github.com/orangemug/instantiable-fastdom" target="_blank" rel="external">instantiable-fastdom</a>）<br>来解决。</p>
<p>另外fastdom在后来的版本中直接try-catch掉了这种异常。</p>
<h2 id="u4E09_u3001_u52A8_u753B_u6027_u80FD"><a href="#u4E09_u3001_u52A8_u753B_u6027_u80FD" class="headerlink" title="三、动画性能"></a>三、动画性能</h2><p>由于只做了很少的性能测试，也没有深入了解一些动画框架的原理，因此只能总结一点简单的理解。</p>
<h3 id="js_u52A8_u753B"><a href="#js_u52A8_u753B" class="headerlink" title="js动画"></a>js动画</h3><p>在解决布局颠簸问题，并且缓存各种状态之后，我们还有以下可能提升性能的地方：</p>
<ol>
<li>忽略过于微小甚至不可见的状态改变（&lt;1px）</li>
<li>根据实际情况主动触发GPU硬件加速</li>
<li>raf</li>
</ol>
<h3 id="css_u52A8_u753B"><a href="#css_u52A8_u753B" class="headerlink" title="css动画"></a>css动画</h3><p>上面虽然列举了一系列的问题，但css动画还是又快又好。</p>
<p>在<a href="https://events.google.com/io2015/" target="_blank" rel="external">2015 Google I/0 的官方站点</a>中，<br>使用了一种被称作FLIP的原则开发动画效果<a href="https://github.com/FrontendMagazine/Works/blob/master/archive/flip-your-animation.md" target="_blank" rel="external">链接，译文</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<!--# 事件循环->布局颠簸->动画性能-->
<blockquote>
<p><a href="http://tianyn1990.github.io" target="_blank" rel="external">tianyn1990</a></p>
</blockquo]]>
    </summary>
    
      <category term="fastdom" scheme="http://yoursite.com/tags/fastdom/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTML语义化]]></title>
    <link href="http://yoursite.com/2016/01/05/HTML%E8%AF%AD%E4%B9%89%E5%8C%96/"/>
    <id>http://yoursite.com/2016/01/05/HTML语义化/</id>
    <published>2016-01-05T13:25:43.000Z</published>
    <updated>2016-01-14T08:52:39.000Z</updated>
    <content type="html"><![CDATA[<p><em>面试的时候，我有时候会问面试者 <strong>你对HTML语义化的理解</strong> 这样一题。我期待的回答起码包括：什么是语义化 ，为什么要语义化或者语义化有什么作用这样两部分，如果能举一些语义化标签的使用场景就更完美了。对HTML标签语义化的理解和实践，作为我们每个前端攻城狮的一个必备技能和自我要求，好么？</em></p>
<h3 id="u8BED_u4E49_u5316_What_+_Why"><a href="#u8BED_u4E49_u5316_What_+_Why" class="headerlink" title="语义化 What + Why"></a>语义化 <code>What + Why</code></h3><blockquote>
<p>语义化是前端开发里面的一个专用术语，其优点在于标签语义化有助于构架良好的html结构，有利于搜索引擎的建立索引、抓取；另外，亦有利于页面在不同的设备上显示尽可能相同；此外，亦有利于构建清晰的机构，有利于团队的开发、维护。    —— <a href="https://zh.wikipedia.org/wiki/%E8%AF%AD%E4%B9%89%E5%8C%96" target="_blank" rel="external">维基百科</a></p>
</blockquote>
<p>以上，很官方的解释，而且重点在说标签语义化的作用了。<br>其实，通俗的说，语义化就是用正确的<strong>标签</strong>做正确的事情，表达正确的意思。浏览器很包容，即使你用非语义的标签，再用CSS披上一层外衣，也可以达到语义标签的效果，但这样真的好么？当然不好！<br>首先，我们写的代码<strong>不是只给你自己看的</strong>。通篇DIV标签，你考虑过小伙伴们的感受么？有时候维护别人的代码，比推倒重写更难受，没错，就是难受。一份好的HTML代码，应该是正确嵌套、语义明确、结构清晰、合理缩进加必要的注释。<br>再者，我们写的代码除了给用户看到最终的效果，<strong>也要让机器能更好的识别</strong>。 最重要的就是要对搜索引擎友好，尤其做电商类网站，<em>SEO</em>更为重要，好的排名能给网站带来更多流量。另外还有针对有视觉障碍的用户使用的屏幕阅读器，也要考虑到web可访问性<a href="http://www.w3.org/standards/webdesign/accessibility" target="_blank" rel="external">Web Accessibility</a>。</p>
<p>如果用对了标签，即使有一天你的网页<strong>裸奔</strong>了，在没有CCS的情况下，也能以一定的文档格式显示（浏览器对各个标签都有默认的样式），并且是容易阅读的。编写网页代码的时候，要从设计稿（视觉稿or交互稿）中明确语义，是标题就用<code>h1-h6</code>，是段落就用<code>p</code>，是列表就该考虑用<code>ul+li</code>、<code>ol+li</code>或<code>dl+dt+dd</code>…</p>
<h3 id="u8BED_u4E49_u5316_u5B9E_u6218"><a href="#u8BED_u4E49_u5316_u5B9E_u6218" class="headerlink" title="语义化实战"></a>语义化实战</h3><p>想要用对标签，先要理解标签：<a href="http://www.w3school.com.cn/tags/index.asp" target="_blank" rel="external">HTML标签大全</a> 。</p>
<p><img src="../../../../uploads/images/html1.png" alt="image"></p>
<hr>
<p><strong>图标</strong>：适合放图标的标签（行内标签且简短）（不考虑兼容性，可以用before | after伪元素）<br>    | 标签       |     描述         |<br>    | :——–   | ——–   |<br>    | b            |定义粗体字    |<br>    | i         |定义斜体字    |<br>    | em        |定义强调文本   |<br>    | span        |定义文档中的节 |</p>
<p><strong>按钮</strong>：如果是表单中的按钮，推荐<code>button</code>或<code>input</code>并设置type属性，其他情况也可以用<code>a</code>、<code>b</code>等行内标签模拟按钮<br><strong>图片</strong>：<code>img</code>标签，注意设置<code>alt</code>属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"/images/demo.png"</span> <span class="attribute">alt</span>=<span class="value">"demo展示"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果图片中包含了重要信息，最好也写到标签里再用样式隐藏掉。比如考拉的商品详情页，商品信息都是图片来展示的，这对seo很不利，应该把图片中重要的信息写到标签里并且隐藏掉，图片不能完全替代网页元素，这也是应该养成的习惯。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"/images/goodinfo.png"</span> <span class="attribute">alt</span>=<span class="value">"商品信息"</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"display:none;"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">p</span>&gt;</span>此处展示图片中的信息<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>图片新标签</strong>：<code>figure</code> 属于 html5，语义是文档中的插图<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">figure</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>黄浦江上的的卢浦大桥<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"shanghai_lupu_bridge.jpg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">figure</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>表单</strong>：整个结构是个完整的表单语义，要用<code>form</code>标签，登录|注册表单、完善信息表单、消息发送表单等等。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">""</span> <span class="attribute">method</span>=<span class="value">""</span> <span class="attribute">class</span>=<span class="value">"m-loginfm"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"account"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"account"</span> <span class="attribute">id</span>=<span class="value">"account"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"button"</span>&gt;</span>登录<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/register"</span>&gt;</span>去注册<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">p</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>表格</strong>：大型的数据表格用table，一些形似表格非严格意义上的表格可以用别的标签加样式来实现，因为表格本身渲染耗性能，而且结构比较深，样式也不够灵活。比较完整的表格结构：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">caption</span>&gt;</span>Monthly savings<span class="tag">&lt;/<span class="title">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">th</span>&gt;</span>Month<span class="tag">&lt;/<span class="title">th</span>&gt;</span><span class="tag">&lt;<span class="title">th</span>&gt;</span>Savings<span class="tag">&lt;/<span class="title">th</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>Sum<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>$180<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>5月<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>$120<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>6月<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>$60<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>列表</strong>：无序列表（<code>ul &gt; li</code>）、有序列表（<code>ol &gt; li</code>）、定义列表（<code>dl &gt; dt + dd</code>），不要嵌套错误<br><img src="../../../../uploads/images/html2.png" alt="image"></p>
<ul>
<li><strong>html5新标签</strong>：移动端开发可以大胆用起来，PC端兼容方案：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">var html5 = "abbr,article,aside,audio,canvas,datalist,details,dialog,eventsource,figure,footer,header,hgroup,mark,menu,meter,nav,output,progress,section,time,video".split(','),i = html5.length;</span><br><span class="line">while(i--) document.createElement(html5[i]);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<p>html5的布局标签</p>
<table>
<thead>
<tr>
<th style="text-align:left">标签</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">header</td>
<td>定义页眉</td>
</tr>
<tr>
<td style="text-align:left">footer</td>
<td>定义页脚</td>
</tr>
<tr>
<td style="text-align:left">section</td>
<td>定义节</td>
</tr>
<tr>
<td style="text-align:left">article</td>
<td>定义文章</td>
</tr>
<tr>
<td style="text-align:left">aside</td>
<td>定义页面内容之外的内容</td>
</tr>
<tr>
<td style="text-align:left">nav</td>
<td>定义导航链接</td>
</tr>
</tbody>
</table>
<p><img src="../../../../uploads/images/html3.png" alt="image"></p>
<hr>
<p>最后，让HTML语义化镌刻进我们前端开发者的基因里，让书写正确的标签，成为下意识的行为。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>面试的时候，我有时候会问面试者 <strong>你对HTML语义化的理解</strong> 这样一题。我期待的回答起码包括：什么是语义化 ，为什么要语义化或者语义化有什么作用这样两部分，如果能举一些语义化标签的使用场景就更完美了。对HTML标签语义化的理解和实践，作]]>
    </summary>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[impress.js 调研报告]]></title>
    <link href="http://yoursite.com/2015/12/24/impress.js%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2015/12/24/impress.js调研报告/</id>
    <published>2015-12-24T02:17:48.000Z</published>
    <updated>2015-12-24T02:17:48.000Z</updated>
    <content type="html"><![CDATA[<p>在开始阅读本文之前，你至少应该打开官网的<a href="http://impress.github.io/impress.js" target="_blank" rel="external">例子</a>看看，并且<a href="https://github.com/stefina/impressJS" target="_blank" rel="external">下载代码</a>到本地跑跑 :-)</p>
<p>在阅读过程中，强烈建议阅读的同时不断查看源码，不断对照官网提供的<a href="http://impress.github.io/impress.js" target="_blank" rel="external">例子</a></p>
<h2 id="u4E00_u3001_u547D_u540D"><a href="#u4E00_u3001_u547D_u540D" class="headerlink" title="一、命名"></a>一、命名</h2><p>根据页面结构：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">body <span class="comment">--</span></span><br><span class="line">     |</span><br><span class="line">  <span class="keyword">div</span><span class="comment">#impress --</span></span><br><span class="line">              |</span><br><span class="line">            <span class="keyword">div</span>.step</span><br></pre></td></tr></table></figure>
<p>为了方便理解，我们约定：</p>
<table>
<thead>
<tr>
<th style="text-align:center">文中简称</th>
<th style="text-align:center">对应节点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">「PPT」</td>
<td style="text-align:center"><code>&lt;div id=impress\&gt;</code></td>
</tr>
<tr>
<td style="text-align:center">「Page」</td>
<td style="text-align:center"><code>&lt;div class=&quot;step&quot;\&gt;</code></td>
</tr>
</tbody>
</table>
<h2 id="u4E8C_u3001_u4EC0_u4E48_u662F_26amp_3B_u76F8_u5173_u9879_u76EE_26amp_3B_u77E5_u8BC6"><a href="#u4E8C_u3001_u4EC0_u4E48_u662F_26amp_3B_u76F8_u5173_u9879_u76EE_26amp_3B_u77E5_u8BC6" class="headerlink" title="二、什么是&amp;相关项目&amp;知识"></a>二、什么是&amp;相关项目&amp;知识</h2><h3 id="1_u3001impress-js_u7B80_u4ECB"><a href="#1_u3001impress-js_u7B80_u4ECB" class="headerlink" title="1、impress.js简介"></a>1、impress.js简介</h3><h3 id="2_u3001_u76F8_u5173_u9879_u76EE"><a href="#2_u3001_u76F8_u5173_u9879_u76EE" class="headerlink" title="2、相关项目"></a>2、相关项目</h3><p>官方总结的相关项目和例子在<a href="https://github.com/impress/impress.js/wiki/Examples-and-demos" target="_blank" rel="external">这里</a>。包含：工具、插件、demo等。比如：</p>
<ul>
<li>「插件」：显示演示文稿的进度条  <a href="https://github.com/m42e/impress.js-progress" target="_blank" rel="external">链接&gt;&gt;</a></li>
<li>「工具」：快速构建基于impressJs的演示文稿  <a href="http://strut.io/" target="_blank" rel="external">链接&gt;&gt;</a></li>
</ul>
<p>除此之外还有很多…</p>
<h3 id="3_u3001_u9700_u8981_u63D0_u524D_u4E86_u89E3"><a href="#3_u3001_u9700_u8981_u63D0_u524D_u4E86_u89E3" class="headerlink" title="3、需要提前了解"></a>3、需要提前了解</h3><ul>
<li>perspective &amp; transform-style：<a href="https://developer.mozilla.org/en/CSS/perspective" target="_blank" rel="external">文档1</a>、<a href="http://www.w3cplus.com/css3/transform-basic-property.html" target="_blank" rel="external">文档2</a></li>
</ul>
<h2 id="u4E09_u3001_u5982_u4F55_u4F7F_u7528"><a href="#u4E09_u3001_u5982_u4F55_u4F7F_u7528" class="headerlink" title="三、如何使用"></a>三、如何使用</h2><blockquote>
<p>唯一限制你的是<strong>想象力</strong></p>
</blockquote>
<h3 id="1_u3001_u9875_u9762_u5143_u7D20"><a href="#1_u3001_u9875_u9762_u5143_u7D20" class="headerlink" title="1、页面元素"></a>1、页面元素</h3><h4 id="u5404_u5143_u7D20_u4ECB_u7ECD"><a href="#u5404_u5143_u7D20_u4ECB_u7ECD" class="headerlink" title="各元素介绍"></a>各元素介绍</h4><ul>
<li><p>body：在不同状态下有不同的class属性值</p>
<ul>
<li>浏览器兼容：class=’impress-enabled’</li>
<li>浏览器不兼容：class=’impress-not-supported’，如果在初始状态下就赋该值，可以使禁止了js的客户端用户仍可以看到有意义的信息</li>
<li>当页面进入到某个「Page」（指演示文稿的一页，body&gt;#impress&gt;.step），如果该「Page」有id=’p1’，那么body上会生成class=’<strong>impress-on-p1</strong>‘。<strong>不同的class代表了不同的「状态」，这样我们可以非常方便的控制每个「Page」下的样式</strong>。另外，如果某个Page没有设置id，那么对应body上class为：impress-on-step-「Page的序号，从1开始」</li>
</ul>
</li>
<li><p>body&gt;#impress</p>
<ul>
<li>下文称div#impress为「PPT」，「PPT」为impress.js的核心，所有的「Page」（class=’step’）都放在它里面</li>
<li>id值当然是可配置的（默认”impress”）：<code>impress(&#39;id&#39;).init()</code></li>
<li>可选属性：data-transition-duration=”1000”，表示页面切换动画用时1000ms（默认1000ms）</li>
<li>可选属性：data-perspective=”1000”（默认1000像素），表示perspective（我一般理解为<strong>视距</strong>，即人眼离画布的距离）值为1000px，用来表现3D效果。如果不希望使用3D可设值为0</li>
</ul>
</li>
<li><p>body&gt;#impress&gt;.step（简称「Page」）</p>
<ul>
<li>所有#impress的子元素都必须设置class=’step’</li>
<li>文中所说的「Page」均指的是「#impress元素」下的「.step元素」，每个「Page」均表示演示文稿中的一页</li>
</ul>
<ul>
<li>通过在该节点上配置各种属性，我们就可以得到一个具有不同大小、位置、3D切换效果的演示文稿了，这些配置有 <strong>重点</strong>：<ul>
<li>data-x，data-y：如果将整个页面比作一个巨大的画布，那么我们需要确定每一个Page在这张画布上的具体位置。这两个属性指明了Page的<strong>「中心」</strong>的x,y坐标。注意：<strong>值可以是负的</strong></li>
<li>data-scale：该属性表示Page的「缩放倍数」，设置了该属性的Page大小是「标准」（step上设置的width,height）的N倍，也就是长宽属性是标准Page的N倍。在画布上所占面积也当然有所不同。注意：<strong>值可以为小数，表示缩小</strong></li>
<li>data-rotate：相当于为Page设置了样式transform:rotate(**deg)，表示对Page进行了旋转。该属性的值为角度数，当然可以为负值</li>
<li>data-z：<em>「页面终于酷炫起来了」</em> Page终于被赋予了3D属性。通过沿着z轴移动，拉近/远离了屏幕，相当于样式transform:translateZ(**px)，再结合#impress上的data-perspective，最终产生3D效果╮(╯_╰)╭</li>
<li>data-rotate-x，data-rotate-y：不仅距离上可以对Page进行3D移动，还可以将Page进行x,y轴向的旋转操作，另外z轴的旋转就是前面的data-rotate。<strong>记：分别从上、左、正面看一个物体，顺时针方向就分别是y轴、x轴、z轴旋转的「正方向」</strong></li>
</ul>
</li>
<li>做个总结吧：<ul>
<li><code>data-x</code>, <code>data-y</code>, <code>data-z</code>：定义了Page的<strong>中心</strong>在三维空间的位置</li>
<li><code>data-rotate-x</code>, <code>data-rotate-y</code>, <code>data-rotate-z</code>, <code>data-rotate</code>：定义了Page沿x/y/z轴的旋转角度，「data-rotate-z」与「data-rotate」完全一致</li>
<li><code>data-scale</code>：定义了Page的缩放倍数，值为小数表示缩小</li>
</ul>
</li>
</ul>
</li>
<li><p>预览功能：impress.js并没有直接提供「预览所有Page」的功能，但我们可以通过新建一个Page并设置特殊的属性值，很容易的实现。步骤如下：</p>
<ul>
<li>增加一个Page，设置id=overview（当然别的也可以）</li>
<li>计算「整个画布」所有Page在一起大概的宽高值（在排列各个Page的大小位置的时候，你最好画个草图），假设为：约6000px * 约3000px</li>
<li>设置Page#overview的属性：data-x=3000,data-y=1500，也就是把#overview这个Page放到画布中央</li>
<li>找一个合适的放大倍数，将#overview这个Page的大小覆盖到整个画布，假设没有缩放的Page宽高为900px,700px，你可以大概放大10倍：data-scale=10</li>
<li>设置#overview相应的样式（详见下文），如：.impress-on-overview{ display: none } 等（因为我们不希望#overview遮盖到其他的Page）</li>
<li>这样，当访问到#overview这个「Page」的时候，就可以<strong>预览</strong>到整个画布（PPT）了</li>
</ul>
</li>
</ul>
<h3 id="2_u3001_u4E0D_u540C_u72B6_u6001_u4E0B_u9875_u9762_u5143_u7D20_u5206_u6790_uFF1A"><a href="#2_u3001_u4E0D_u540C_u72B6_u6001_u4E0B_u9875_u9762_u5143_u7D20_u5206_u6790_uFF1A" class="headerlink" title="2、不同状态下页面元素分析："></a>2、不同状态下页面元素分析：</h3><h4 id="u72B6_u60011_uFF1A_u9759_u6001_u9875_u9762"><a href="#u72B6_u60011_uFF1A_u9759_u6001_u9875_u9762" class="headerlink" title="状态1：静态页面"></a>状态1：静态页面</h4><ul>
<li><p>body.impress-not-supported</p>
<ul>
<li><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body <span class="keyword">class</span>=<span class="string">"impress-not-supported"</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>「PPT」div#impress</p>
<ul>
<li><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"impress"</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>「Page」div.step</p>
<ul>
<li><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"step"</span> <span class="built_in">data</span><span class="attribute">-x</span>=<span class="string">"0"</span> <span class="built_in">data</span><span class="attribute">-y</span>=<span class="string">"0"</span><span class="attribute">...</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="u72B6_u60012_uFF1A_u6D4F_u89C8_u5668_u52A0_u8F7D_u9875_u9762"><a href="#u72B6_u60012_uFF1A_u6D4F_u89C8_u5668_u52A0_u8F7D_u9875_u9762" class="headerlink" title="状态2：浏览器加载页面"></a>状态2：浏览器加载页面</h4><p>浏览器执行代码：<code>impress().init();</code> 之后，如果浏览器支持impressJs，那么：</p>
<ul>
<li>body的class增加「.impress-supported」与「.impress-enabled」，并删除「.impress-not-supported」</li>
<li>#impress的所有子节点「所有Page」，会被一个div包裹，页面结构变为：body&gt;#impress&gt;div&gt;.step</li>
<li>根据我们在「PPT」「Page」上设置的各种属性值（以及Page的width&amp;height属性，页面的宽高等），计算得出一些样式（后面详述），分别赋值到body、#impress（PPT）、.step（Page）上</li>
<li>框架会默认跳转到第一个Page：<ul>
<li>根据第一个Page的id值，假设为<code>p1</code>，修改地址栏哈希值为：<code>/p1</code>，如果Page没有id属性，那么根据页面顺序，地址栏哈希值为：<code>/step-1</code></li>
<li>所有Page（.step）增加class：「.future」</li>
<li>第一个Page（.step）增加class：「.active」表示为展示中状态，500ms（默认500ms，可由#impress上的data-transition-duration属性修改）之后，「.future」变为「.present」</li>
</ul>
</li>
</ul>
<h4 id="u72B6_u60013_uFF1A_u8BBF_u95EE_u4E0B_u4E00_u4E2APage"><a href="#u72B6_u60013_uFF1A_u8BBF_u95EE_u4E0B_u4E00_u4E2APage" class="headerlink" title="状态3：访问下一个Page"></a>状态3：访问下一个Page</h4><p>当用户点击空格或者方向键（右/下）之后，进入下一个Page（#impress .step:nth-child(2)）。<br>当访问到第二个Page之后，第一个Page的class「.present」变为「.past」，并删除「.active」。<br>第二个Page的class先增加「.active」，500ms后，class「.future 或者 .past」变为「.present」，并且地址栏哈希值变为第二个Page的id值或者<code>/step-2</code>，</p>
<h4 id="future-_26gt_3B-present-_26gt_3B-past"><a href="#future-_26gt_3B-present-_26gt_3B-past" class="headerlink" title=".future-&gt;.present-&gt;.past"></a>.future-&gt;.present-&gt;.past</h4><p>future：未曾访问过的Page</p>
<p>present：正在访问的Page（同时该页面还会有class「.active」）</p>
<p>past：访问过的Page（只要曾经访问过，那么就是.past，当第二遍浏览到某个Page时，那么该Page的class为「.past,.active」）</p>
<p>另外，当页面切换时，「.active」会立即生效，但「.future/.past -&gt; .present」会在500ms后发生切换</p>
<h3 id="3_u3001_u81EA_u5B9A_u4E49css"><a href="#3_u3001_u81EA_u5B9A_u4E49css" class="headerlink" title="3、自定义css"></a>3、自定义css</h3><blockquote>
<p>「来自<a href="https://github.com/stefina/impressJS/blob/master/css/impress-demo.css" target="_blank" rel="external">impress-demo.css</a>中的注释，其实直接看这个文件也许更清楚」</p>
</blockquote>
<p>Impress.js不调用任何外部的样式文件，<strong>JS会生成「动画所需」的所有样式</strong>。<br>官方提供的<a href="https://github.com/stefina/impressJS/blob/master/css/impress-demo.css" target="_blank" rel="external">impress-demo.css</a>样式文件是为了演示用的，阅读它可以明白如何对impress.js中的元素进行渲染。具体内容如下：</p>
<h4 id="u9875_u9762_u7EA7"><a href="#u9875_u9762_u7EA7" class="headerlink" title="页面级"></a>页面级</h4><ol>
<li><p>你喜欢的reset和global样式</p>
</li>
<li><p>「.fallback-message」：若浏览器不兼容impress.js则展示此部分内容<br>同时需要声明：（浏览器支持impress.js时隐藏）</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.impress-supported</span> <span class="class">.fallback-message</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.fallback-message</span> <span class="rules">&#123;</span><br><span class="line">    <span class="comment">/* 不兼容时的样式 */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="Page_u7EA7"><a href="#Page_u7EA7" class="headerlink" title="Page级"></a>Page级</h4><ul>
<li>「.step」：需要指定width，该宽度会用于代入公式进行计算，<br>影响「Page看起来的大小」的因素有：#impress上缩放比例(scale)、.step宽高值(width)、3D透视属性（perspective,translateZ）等（下文会详述）</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.step</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">900px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">600px</span></span></span>;</span><br><span class="line">    <span class="comment">/* etc.. */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>「.impress-enabled .step」-非当前Page的样式，参考：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.impress-enabled</span> <span class="class">.step</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">opacity</span>:<span class="value"> <span class="number">0.3</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">transition</span>:<span class="value"> opacity <span class="number">1s</span></span></span>; <span class="comment">/* prefix */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>「.impress-enabled .step.active」-当前Page样式：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 当前Page */</span></span><br><span class="line"><span class="class">.impress-enabled</span> <span class="class">.step</span><span class="class">.active</span> <span class="rules">&#123; <span class="rule"><span class="attribute">opacity</span>:<span class="value"> <span class="number">1</span> </span></span></span>&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5355_u5F20Page"><a href="#u5355_u5F20Page" class="headerlink" title="单张Page"></a>单张Page</h4><blockquote>
<p>（使用「Page的id属性」或者「body上的class的impress-on-**」区分作用域）</p>
</blockquote>
<ul>
<li>修改Page大小，修改样式：width,transform:translateZ</li>
<li>Page上class可能取值：「.future」「.present」「.past」「.active」：（静态页面上class=’step’）<ul>
<li>Page未曾被访问过，class为：  「step future」</li>
<li>刚刚转至某个Page，class为：  「step future active」</li>
<li>转到某Page,500ms后，class为：「step present active」</li>
<li>离开某Page，class为：       「step past」</li>
<li>再次进入某Page，class为：    「step past active」</li>
<li>再次进入某Page,500ms后，为： 「step present active」</li>
<li>…</li>
</ul>
</li>
</ul>
<p>因此我们可以通过这4种class，定制不同状态下的不同展示效果</p>
<ul>
<li><p>如果Page内部元素需要使用3D，那么记得要设置「transform-style:preserve-3d」，并且由于「3D transform标准」并不是十分明确，所以必须声明所有的<strong>-prefix-</strong>（&gt;=IE10兼容，且基本都需要加前缀）</p>
</li>
<li><p>别忘了最后增加一个「.step」用来负责预览所有Page，比如官方例子中设置了「id=overview」，相应的body上会增加class：impress-on-overview，因此设置样式如下：</p>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//防止预览时#overview遮住其他Page</span></span><br><span class="line"><span class="id">#overview</span> &#123;</span><br><span class="line">    <span class="tag">display</span><span class="pseudo">:none</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置预览时其它Page的样式</span></span><br><span class="line"><span class="class">.impress-on-overview</span> <span class="class">.step</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u4F5C_u8005_u7684_u5176_u5B83_u6837_u5F0F"><a href="#u4F5C_u8005_u7684_u5176_u5B83_u6837_u5F0F" class="headerlink" title="作者的其它样式"></a>作者的其它样式</h4><ul>
<li>作者发现的一个bug：有时候（chrome等部分浏览器部分版本）进行过3D变换的元素（尤其是沿z轴负方向移动的）会不可点击，原因是它们跑到了body后面。为了避免这个问题，<br>作者使用了「<a href="https://developer.mozilla.org/en/CSS/pointer-events" target="_blank" rel="external">pointer-events: none</a>」(IE11以上支持，在作者的努力下impress.js继续缩小了支持范围真是太棒了)，<br>使用原则是：设置「除#impress元素以外」的所有元素均不可点击，如：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.impress-enabled</span>          <span class="rules">&#123; <span class="rule"><span class="attribute">pointer-events</span>:<span class="value"> none </span></span></span>&#125;</span><br><span class="line"><span class="class">.impress-enabled</span> <span class="id">#impress</span> <span class="rules">&#123; <span class="rule"><span class="attribute">pointer-events</span>:<span class="value"> auto </span></span></span>&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>作者写了一个「.hint」，目的是告知第一次使用演示文稿的同学如何操作，纯样式实现，没啥可说的（不过作用在body上的pointer-events属性让它也不可点击了）。</li>
</ul>
<h2 id="u56DB_u3001_u57FA_u672C_u5B9E_u73B0_u539F_u7406_u300C_u91CD_u8981_u300D"><a href="#u56DB_u3001_u57FA_u672C_u5B9E_u73B0_u539F_u7406_u300C_u91CD_u8981_u300D" class="headerlink" title="四、基本实现原理「重要」"></a>四、基本实现原理<strong>「重要」</strong></h2><h3 id="1_u3001_u5982_u4F55_u4F7F_u7528CSS_u6784_u5EFA_u4E00_u4E2A3D_u73AF_u5883"><a href="#1_u3001_u5982_u4F55_u4F7F_u7528CSS_u6784_u5EFA_u4E00_u4E2A3D_u73AF_u5883" class="headerlink" title="1、如何使用CSS构建一个3D环境"></a>1、如何使用CSS构建一个3D环境</h3><p>你需要3层div，我们可以任性的分别取名为：#impress&gt;#canvas&gt;.step</p>
<p>第一层#impress需要至少需要赋予属性值perspective:<em>*</em>px，以及perspective-origin。perspective可以理解为「视距」（虽然中文意思是：透视，视角，<br>完全不明白的同学可以参考<a href="http://www.zhangxinxu.com/wordpress/?p=2592" target="_blank" rel="external">这篇</a>，或者其他优秀文章），也就是眼睛距离屏幕的距离（z轴）。<br>perspective-origin指的是眼睛的方位（x,y轴）。这两个值确定了眼睛和屏幕的三维位置关系（xyz）（不了解「眼睛」有啥作用的话请继续看下文）。</p>
<p>第二层#canvas，顾名思义可以称作「画布」，因为所有具体展现出来的的3D元素(.step)都包含在它内部。<br>它至少必须设置样式transform-style:preserve-3d，但这个样式为了保险，一般可以设置到这3层中的所有节点上。</p>
<p>第三层.step，它就可以有很多兄弟节点了，这些节点通过设置translate:translate3d() rotate3d() scale()等等样式来定位自己在三维环境中的位置。<br>其中最关键的就是z轴的距离（translateZ），它定义了图形距离屏幕的距离。通过这个距离，以及在#impress中设置的「眼睛」距离屏幕的距离，我们可以画一个「从眼睛到图形的锥形」，<br>而「锥形与屏幕相交」的位置就是这个.step图形在屏幕上呈现的大小了。这么说不是太具体，请看下图（要是弄成可拖动带交互效果的就好了…）：</p>
<p><img src="../../../../uploads/images/perspective.jpg" alt="images"></p>
<p>上面两张图中的画的眼睛可以理解为观察者的位置，那面白板可以看做是电脑屏幕，眼睛到白板的距离d就是perspective的值。虚线组成的圆形就是我们希望展示到页面上的图形（impress.js中就是Page）。由这个图形和观察者的眼睛组成的「视锥」投影到屏幕（白板）上的大小，就是屏幕最终展示的图形大小。而大量图形都通过这种方式呈现到屏幕上以后，图形之间就呈现了三维的视觉联系。</p>
<p>完整的例子可以参考我的<a href="http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E6%AD%A3%E6%96%B9%E4%BD%93.html" target="_blank" rel="external">这个栗子</a>，以及<a href="http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC.html" target="_blank" rel="external">这个</a>，还有<a href="http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E7%BF%BB%E4%B9%A6.html" target="_blank" rel="external">这个</a></p>
<h3 id="2_u3001impress-js_u7684_u5207_u6362_u52A8_u753B"><a href="#2_u3001impress-js_u7684_u5207_u6362_u52A8_u753B" class="headerlink" title="2、impress.js的切换动画"></a>2、impress.js的切换动画</h3><p>impress.js之所以这么awesome，最主要的就是各个Page之间的切换动画。每个Page都是上文中的第三层（.step），由于每个Page都会根据设置的各种属性值，被放置在三维环境中的某个位置，<br>它可能被放大、距离屏幕有一段距离、甚至xyz轴都进行了旋转，但我们必须从一个Page动态的切换到另一个Page，那么到底如何切换呢？（假设我们要从Page1切换到Page2）</p>
<p>首先我们要通过对第二层#canvas进行各种3D/2D变换，来抵消Page2的各种3D/2D变换，比如Page2沿z轴旋转了90deg，那么#canvas则要沿z轴旋转-90deg进行抵消。<br>就像在玩儿魔方一样，Page相当于魔方的每一个小块，而#canvas相当于魔方本身，我们可以通过旋转和平移魔方的方式将魔方的任意一个小块移动到我们的「正前方」，<br>同样的道理，我们可以通过将整个画布进行各种3D/2D的变换，来把某一个Page移动到我们的正前方。但要注意的是，我们不进行缩放（scale）。</p>
<p>虽然Page2已经移动到屏幕的正前方了，但如果Page2放大了2倍（data-scale=2），那么我们接下来要抵消它，我们可以通过在#impress上设置样式transform:scale(.5)来反向的缩小2倍，<br>同时为了保证「视距」（眼睛到屏幕的距离）在缩放后依然保持不变，我们还要将#impress上的perspective属性除以2。</p>
<p>再通过在#impress和#canvas上设置transition来实现切换的动画效果</p>
<p>最后需要注意的是，为了使切换尽可能的美观，#impress对「镜头」的拉近远离操作，以及#canvas对「镜头」的旋转平移3d变换操作，它们两者的先后顺序不是一成不变的，基本的原则是：</p>
<ul>
<li><p>如果#impress需要对物体进行拉近操作（拉近操作：Page2的data-scale比Page1的大，那么由Page1切换到Page2就是拉近操作），那么就先操作#canvas，再操作#impress进行放大；</p>
</li>
<li><p>如果#impress需要对物体进行拉远操作，那么需要先操作#impress进行拉远操作，再进行#canvas的变换操作。这样就可以看到#canvas变换时，Page2发生的各种变换的全过程！</p>
</li>
</ul>
<h2 id="u4E94_u3001_u9879_u76EE_u4E2D_u5982_u4F55_u7528_26amp_3B_u501F_u9274_u4EF7_u503C"><a href="#u4E94_u3001_u9879_u76EE_u4E2D_u5982_u4F55_u7528_26amp_3B_u501F_u9274_u4EF7_u503C" class="headerlink" title="五、项目中如何用&amp;借鉴价值"></a>五、项目中如何用&amp;借鉴价值</h2><h3 id="u95EE_u9898_uFF1A"><a href="#u95EE_u9898_uFF1A" class="headerlink" title="问题："></a>问题：</h3><ol>
<li>兼容性非常差，需要&gt;=IE10，且IE全都不支持transform-style:preserve-3d</li>
<li>移动端展示效果还有待更全面的测试，而作者完全弃用了移动端，虽然作者在开发代码之后的几年移动端性能进步很大，但根据其它项目经验来看在大量3D元素的情况下至少低端机帧率会降低很多，用户体验差的话还不如不用，比如<a href="https://tianyn1990.github.io/dist/views/ppt/ppt.html#/beach" target="_blank" rel="external">这个</a>，其实也做了手机的适配，但效果就…</li>
<li>需要有一定的改造成本和测试成本，这个框架可能不适合直接使用，需要定制</li>
</ol>
<h3 id="u4F18_u52BF_uFF1A"><a href="#u4F18_u52BF_uFF1A" class="headerlink" title="优势："></a>优势：</h3><ul>
<li>的确很酷炫啊有木有</li>
<li>兼容和移动端问题，可以仅仅针对部分使用现代PC浏览器的用户提供一个非常酷炫的页面，类似天猫双十一期间的一些游戏和canvas活动页</li>
<li>移动端的话由于性能较差，但如果使用经过极大优化的js动画（如：<a href="http://julian.com/research/velocity/" target="_blank" rel="external">velocity</a>），并且适当避免复杂的3d效果，效果和性能还是值得期待的。js动画可优化的部分至少包括以下几点：（当然不完整）<ul>
<li>缓存动画元素的状态（类似canvas），减少读操作</li>
<li>同步的DOM读写：框架层面上，在浏览器一帧的渲染中，所有DOM操作统一先读后写，减少<a href="http://wilsonpage.co.uk/preventing-layout-thrashing/" target="_blank" rel="external">layout thrashing</a></li>
</ul>
</li>
</ul>
<h3 id="u501F_u9274_uFF1A"><a href="#u501F_u9274_uFF1A" class="headerlink" title="借鉴："></a>借鉴：</h3><p>impress.js的酷炫效果源于将平面页面（PPT）的各个部分（Page）拆分出来，然后三维化了（可近可远、可斜可转、甚至可以在你后面）。<br>借鉴这种思想，打开脑洞：当你点击页面上一个人头像的小图标之后，屏幕会拉近那个头像图标并最终进入到它的内部，（eng二声），<br>那里会出现另一个页面，就是那个头像对应的人的主页。如果单页面应用做成这样，光是想想就有点小激动呢<del>~</del>~</p>
<h2 id="u516D_u3001_u7ED3_u8BED"><a href="#u516D_u3001_u7ED3_u8BED" class="headerlink" title="六、结语"></a>六、结语</h2><p>本文的语言还需要再进行梳理，有些内容自己理解了但没讲清楚，而有些内容有可能讲的过细。</p>
<h2 id="u9644_uFF1A_u4EE3_u7801_u8BE6_u7EC6_u5206_u6790_uFF08_u672A_u5B8C_u6210-_uFF09"><a href="#u9644_uFF1A_u4EE3_u7801_u8BE6_u7EC6_u5206_u6790_uFF08_u672A_u5B8C_u6210-_uFF09" class="headerlink" title="附：代码详细分析（未完成..）"></a>附：代码详细分析（未完成..）</h2><h3 id="1_u3001_u89E3_u51B3_u517C_u5BB9_u6027"><a href="#1_u3001_u89E3_u51B3_u517C_u5BB9_u6027" class="headerlink" title="1、解决兼容性"></a>1、解决兼容性</h3><p>为了解决「不同浏览器中，给DOM赋予内联样式的兼容性问题」，作者首先参考<a href="https://modernizr.com/" target="_blank" rel="external">Modernizr</a>写了一个功能函数，见下方代码，值得认真读一下</p>
<p>注：<a href="https://github.com/Modernizr/Modernizr" target="_blank" rel="external">Modernizr github</a>项目用于检测HTML5 &amp; CSS3新特性是否适用于浏览器，你可以在css以及js中使用它，详见<a href="https://modernizr.com/docs/" target="_blank" rel="external">文档</a></p>
<p>原理：创建一个Element元素，假设命名为dummy，如果希望赋值「style=’width:100px’」，那么分别检测dummy.style是否包含如下属性之一：width,WebkitWidth,MozWidth,OWidth,msWidth,KhtmlWidth。<br>如果dummy.style中存在其中的某个属性，比如WebkitWidth存在，那么赋值dummy.style.WebkitWidth=’100px’，并且将这个属性记录下来，以便下次调用时直接使用。</p>
<p>代码：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> 解决不同浏览器中，给DOM赋予内联样式的兼容性问题</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param prop &#123;String&#125; css属性，注意如果属性由横线「-」链接，请改为驼峰式</span></span><br><span class="line"> <span class="keyword">*</span>                      比如mozilla内核独有css：-moz-box-pack，你需要这样使用：</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>
<pre><code>*         //代码在火狐浏览器下返回「MozBoxPack」，你可以调用element.style.MozBozPack来为该属性赋值
*         var pkey = pfx(&apos;boxPack&apos;);
*
*         <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> * @returns &#123;string/Null&#125; 当前浏览器下，element.style中的对应属性；如果当前浏览器不支持，则返回<span class="literal">null</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">var</span> pfx = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> style = document.createElement(<span class="string">'dummy'</span>).style,</span><br><span class="line">            prefixes = <span class="string">'Webkit Moz O ms Khtml'</span>.split(<span class="string">' '</span>),</span><br><span class="line">            memory = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">( prop )</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="keyword">typeof</span> memory[ prop ] === <span class="string">"undefined"</span> ) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> ucProp  = prop.charAt(<span class="number">0</span>).toUpperCase() + prop.substr(<span class="number">1</span>),</span><br><span class="line">                    props   = (prop + <span class="string">' '</span> + prefixes.join(ucProp + <span class="string">' '</span>) + ucProp).split(<span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">                memory[ prop ] = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">for</span> ( <span class="keyword">var</span> i <span class="keyword">in</span> props ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ( style[ props[i] ] !== <span class="literal">undefined</span> ) &#123;</span><br><span class="line">                        memory[ prop ] = props[i];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> memory[ prop ];</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一个例子：</span></span><br><span class="line"><span class="keyword">var</span> setStyle = <span class="function"><span class="keyword">function</span> <span class="params">(elem, key, val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pkey = pfx(key);</span><br><span class="line">    <span class="keyword">if</span>(pkey) &#123;</span><br><span class="line">        elem.style[pkey] = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">setStyle(someElem, <span class="string">'width'</span>, <span class="string">'100px'</span>);</span><br></pre></td></tr></table></figure>
</code></pre><h3 id="2_u3001_u5404_u79CD_u529F_u80FD_u51FD_u6570"><a href="#2_u3001_u5404_u79CD_u529F_u80FD_u51FD_u6570" class="headerlink" title="2、各种功能函数"></a>2、各种功能函数</h3><ul>
<li>array-like -&gt; Array  </li>
</ul>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// `arraify` takes an<span class="instruction"> array-like </span>object<span class="instruction"> and </span>turns it into real Array</span><br><span class="line">// to make all the Array.prototype goodness available.</span><br><span class="line">var arrayify = function<span class="function"> (</span> a <span class="function">)</span> &#123;</span><br><span class="line">   <span class="instruction"> return </span><span class="keyword">[</span>].slice.call( a <span class="function">)</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>将array-like对象转换成Array类型，使对象拥有数组的各种方法，便于各种操作。其实应该缓存「[]」，不是因为内存消耗，而是每次调用会增加一次创建数组对象的时间。</p>
<ul>
<li>批量设置内联样式</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `css` function applies the styles given in `props` object to the element</span></span><br><span class="line"><span class="comment">// given as `el`. It runs all property names through `pfx` function to make</span></span><br><span class="line"><span class="comment">// sure proper prefixed version of the property is used.</span></span><br><span class="line"><span class="keyword">var</span> css = <span class="function"><span class="keyword">function</span> <span class="params">( el, props )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key, pkey;</span><br><span class="line">    <span class="keyword">for</span> ( key <span class="keyword">in</span> props ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( props.hasOwnProperty(key) ) &#123;</span><br><span class="line">            pkey = pfx(key);</span><br><span class="line">            <span class="keyword">if</span> ( pkey !== <span class="literal">null</span> ) &#123;</span><br><span class="line">                el.style[pkey] = props[key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> el;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>批量设置内联样式，它内部当然使用的是pfx函数了，由于props参数是{}对象，因此要hasOwnProperty</p>
<ul>
<li><p>选择器：<br>var byId = function ( id ){…}：document.getElementById(id)</p>
<p>var $ = function ( selector, context ){…}：context.querySelector(selector); 返回对象</p>
<p>var $$ = function ( selector, context ){…}：arrayify( context.querySelectorAll(selector) ); 返回数组</p>
</li>
<li><p>自定义事件：</p>
</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// <span class="escape">`t</span>riggerEvent<span class="escape">` </span>builds <span class="literal">a</span> custom DOM event with given <span class="escape">`e</span>ventName<span class="escape">` </span><span class="literal">and</span> <span class="escape">`d</span>etail<span class="escape">` </span>data</span><br><span class="line">// <span class="literal">and</span> triggers it on element given as <span class="escape">`e</span>l<span class="escape">`.</span></span><br><span class="line">var triggerEvent = function (el, eventName, detail) &#123;</span><br><span class="line">    var event = document.createEvent(<span class="string">"CustomEvent"</span>)<span class="comment">;</span></span><br><span class="line">    event.initCustomEvent(eventName, <span class="literal">true</span>, <span class="literal">true</span>, detail)<span class="comment">;</span></span><br><span class="line">    el.dispatchEvent(event)<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>这个待我慢慢道来。首先根据<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events" target="_blank" rel="external">Creating and triggering events</a><br>中的分类，类似作者的这种自定义事件方式，属于过时的方法，在最新的规范中已经被剔除，使用该方案而没有做兼容判断的js随时可能报错（虽然如果想兼容IE的话就必须用这种方式），这个所谓的过时方法举例如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为了这个栗子，首先得有一个Element</span></span><br><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步：创建事件对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Event对象</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">'HTMLEvents'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步：初始化事件对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定制化Event对象的各种参数：名称为「build」（因此为自定义事件）、可以bubble、允许cancel</span></span><br><span class="line">event.initEvent(<span class="string">'build'</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三步：注册事件：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向某个Element注册build事件</span></span><br><span class="line">elem.addEventListener(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.target);</span><br><span class="line">    <span class="built_in">console</span>.log(e.detail);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四步：触发事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用js触发（自定义事件当然用js触发了）某个Element上自定义的事件event（名称「build」，可bubble，可cancel）</span></span><br><span class="line">elem.dispatchEvent(event);</span><br></pre></td></tr></table></figure>
<p>总结一下就是：</p>
<ul>
<li>步1+步2：创建（createEvent）&amp;初始化（initEvent）事件对象。通过这两步，你会得到一个Event对象。创建事件时的参数是’HTMLEvents’，这样会得到一个Event对象，<br>如果使用’MouseEvents’作为参数，那么得到的是一个MouseEvent对象，而MouseEvent对象初始化的时候需要使用’initMouseEvent’函数，它们都属于规范「<a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings" target="_blank" rel="external">DOM Level 2 Events</a>」。<br>这种对应关系：「HTMLEvents &lt;-&gt; event.initEvent()」「MouseEvents &lt;-&gt; event.initMouseEvent()」，可以参考：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent#Notes" target="_blank" rel="external">MDN createEvent</a></li>
<li>步3：这不重要不是么，无论是否注册了事件，你都可以触发它，也就是没有任何意义罢了，如果兼容IE67记得用attachEvent ：）</li>
<li>步4：触发事件的时候，如果在初始化的时候的第二个参数是true，那么它就会向父节点冒泡，如果父节点也注册了’build’事件，那么也会触发回调函数</li>
</ul>
<p>你一定注意到了在作者的代码中创建事件的时候使用的参数是：”CustomEvent”，这样会生成一个CustomEvent对象，这个对象对应的初始化方法为：event.initCustomEvent()，它与initEvent的不同之处在于可以传第4个参数，该参数是一个对象{}，它会在addEventListener注册事件的时候传到回调函数的参数中，你可以在evt.detail中访问到：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">event.initCustomEvent(<span class="string">'build'</span>, <span class="literal">true</span>, <span class="literal">true</span>, &#123;<span class="string">"k"</span>:<span class="string">"v"</span>&#125;);</span><br><span class="line">elem.addEventListener(<span class="string">'build'</span>, <span class="keyword">function</span> (e) &#123;</span><br><span class="line">    console.log(e.detail);//&#123;<span class="string">"k"</span>:<span class="string">"v"</span>&#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>注意：’CustomEvent’需要&gt;=IE9才支持，且「不完全支持」，因为CustomEvent的另一种用法，也就是新的规范中建议的用法：「使用new CustomEvent(…)来同时完成创建和初始化两步」，IE<strong>全都不支持</strong> :(</p>
<p>下面举个栗子来说明一下用法吧：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原来是这样写的</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">event</span> = document.createEvent(<span class="string">'CustomEvent'</span>);</span><br><span class="line"><span class="keyword">event</span>.initCustomEvent(<span class="string">'build'</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, &#123;<span class="string">"k"</span>:<span class="string">"v"</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//新规范要求这样写（IE全都不支持，不支持!）</span></span><br><span class="line"><span class="keyword">event</span> = <span class="keyword">new</span> CustomEvent(<span class="string">'build'</span>, &#123;bubbles: <span class="keyword">true</span>, cancelable: <span class="keyword">true</span>, detail: &#123;<span class="string">"k"</span>:<span class="string">"v"</span>&#125;&#125;);</span><br></pre></td></tr></table></figure>
<p>我们可以写一个<a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill" target="_blank" rel="external">polyfill</a>合并前两种情况，这样就兼容所有&gt;=IE9了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">CustomEvent</span> (<span class="params"> event, params </span>) </span>&#123;</span><br><span class="line">    params = params || &#123; bubbles: <span class="literal">false</span>, cancelable: <span class="literal">false</span>, detail: <span class="literal">undefined</span> &#125;;</span><br><span class="line">    <span class="keyword">var</span> evt = <span class="built_in">document</span>.createEvent( <span class="string">'CustomEvent'</span> );</span><br><span class="line">    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );</span><br><span class="line">    <span class="keyword">return</span> evt;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  CustomEvent.prototype = <span class="built_in">window</span>.Event.prototype;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.CustomEvent = CustomEvent;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>如果你还想了解事件对象Event的各种参数（如：target,currentTarget,timeStamp,type,isTrusted…）和方法（如：…），请参考<a href="https://developer.mozilla.org/en-US/docs/Web/API/Event" target="_blank" rel="external">这里</a></p>
<p>当然，由于以上的种种原因，以及为了获得更灵活的控制，很多框架中常常自己实现一套事件系统，甚至还可以使用发布-订阅模型等等，<a href="http://www.zhangxinxu.com/wordpress/?p=2330" target="_blank" rel="external">这里</a>是张鑫旭大大多年前的简单实现以及讲解，<br>其实就是把创建的自定义事件和回调函数按照对应关系放到一个js对象中进行管理，我就不用再啰嗦了 (^o^)</p>
<p>由作者的功能函数中的事件函数引发的一些说明暂时就到这里，下面继续看作者写的功能函数代码：</p>
<ul>
<li>computeWindowScale</li>
</ul>
<p>先上代码：</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var computeWindowScale = function ( config ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算出window的宽高分别与config参数之间的比值，这个比值最终会应用在PPT（body&gt;div#impress）节点上，</span></span><br><span class="line">    <span class="comment">// 最终保证每一页演示文稿（Page）呈现到浏览器窗口中都「看起来一样大」</span></span><br><span class="line">    var hScale = <span class="keyword">window</span>.innerHeight / config.height,</span><br><span class="line">        wScale = <span class="keyword">window</span>.innerWidth / config.width,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 最终的整体缩放比例取宽高比值中较小的一个，举个栗子说明下原因：</span><br><span class="line">         假如某一页文稿（Page）非常的长（width:1000px; height:3000px;），window的宽高为：width:1000px; height:500px;</span><br><span class="line">         那么最终采用的比值scale是 window.innerHeight/config.height = 1/6</span><br><span class="line">         这个值比较小，那么整个PPT将会被设置：transform:scale(0.166667)，被整体缩小为1/6，</span><br><span class="line">         这样就可以把这个高度很大的Page完整的呈献给用户了（作者的最终目的）</span><br><span class="line">         */</span></span><br><span class="line">        <span class="keyword">scale</span> = hScale &gt; wScale ? wScale : hScale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时作者还设置了一个最大最小scale，用来处理异常参数，基本用不上</span></span><br><span class="line">    <span class="keyword">if</span> (config.maxScale &amp;&amp; <span class="keyword">scale</span> &gt; config.maxScale) &#123;</span><br><span class="line">        <span class="keyword">scale</span> = config.maxScale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (config.minScale &amp;&amp; <span class="keyword">scale</span> &lt; config.minScale) &#123;</span><br><span class="line">        <span class="keyword">scale</span> = config.minScale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">scale</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>computeWindowScale函数根据「入参」与「浏览器窗口的宽高」，计算得出当前PPT（body&gt;div#impress）节点的缩放倍数（transform:scale），具体的计算逻辑见上面代码的注释。</p>
<ul>
<li><p>其他功能函数：（不重要，可直接略过）</p>
<ul>
<li>var toNumber = function (numeric, fallback){…}：将numeric转换成数字，如果无法转换则返回fallback</li>
<li>translate、rotate、scale、perspective：根据参数返回拼装好的值，便于设置样式transform</li>
<li>getElementFromHash：根据地址栏的hash值，返回id属性为该hash值的结点，其实就是找到当前的Page（还记得Page指什么吗~）</li>
</ul>
</li>
</ul>
<h3 id="3_u3001_u6821_u9A8C_u6D4F_u89C8_u5668_u7684_u652F_u6301_u6027"><a href="#3_u3001_u6821_u9A8C_u6D4F_u89C8_u5668_u7684_u652F_u6301_u6027" class="headerlink" title="3、校验浏览器的支持性"></a>3、校验浏览器的支持性</h3><p>方法如下：</p>
<figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CHECK SUPPORT</span></span><br><span class="line">var <span class="keyword">body</span> = document.<span class="keyword">body</span>;</span><br><span class="line"></span><br><span class="line">var ua = navigator.userAgent.toLowerCase();</span><br><span class="line">var impressSupported =</span><br><span class="line">                      <span class="comment">// browser should support CSS 3D transtorms</span></span><br><span class="line">                       ( pfx(<span class="string">"perspective"</span>) !== <span class="literal">null</span> ) &amp;&amp;</span><br><span class="line"></span><br><span class="line">                      <span class="comment">// and `classList` and `dataset` APIs</span></span><br><span class="line">                       ( <span class="keyword">body</span>.classList ) &amp;&amp;</span><br><span class="line">                       ( <span class="keyword">body</span>.dataset ) &amp;&amp;</span><br><span class="line"></span><br><span class="line">                      <span class="comment">// but some mobile devices need to be blacklisted,</span></span><br><span class="line">                      <span class="comment">// because their CSS 3D support or hardware is not</span></span><br><span class="line">                      <span class="comment">// good enough to run impress.js properly, sorry...</span></span><br><span class="line">                       ( ua.search(/(iphone)|(ipod)|(android)/) === -<span class="number">1</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!impressSupported) &#123;</span><br><span class="line">    <span class="comment">// we can't be sure that `classList` is supported</span></span><br><span class="line">    <span class="keyword">body</span>.className += <span class="string">" impress-not-supported "</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">body</span>.classList.remove(<span class="string">"impress-not-supported"</span>);</span><br><span class="line">    <span class="keyword">body</span>.classList.add(<span class="string">"impress-supported"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>impress.js需要浏览器支持CSS 3D（根据是否支持perspective样式来判断，需要&gt;=IE10，且IE全都不支持transform-style:preserve-3d），<br>DOM节点要有<code>classList</code> 和 <code>dataset</code> API，并且最后作者还任性的把几乎所有手机都排除了，不过也对，手机跑起这种页面会卡卡的根本没什么可Awesome的吧~</p>
<p>如果不支持，那么为body的class属性增加值impress-not-supported，如果支持，则增加值impress-supported。</p>
<h3 id="4_u3001_u5168_u5C40_u5BF9_u8C61_26amp_3B_u9ED8_u8BA4_u503C"><a href="#4_u3001_u5168_u5C40_u5BF9_u8C61_26amp_3B_u9ED8_u8BA4_u503C" class="headerlink" title="4、全局对象&amp;默认值"></a>4、全局对象&amp;默认值</h3><ul>
<li><p>roots对象：初始值为空对象{}，里面包含了所有的impress实例（你可以在页面上生成多个impress实例，但没有任何意义）。最终这个对象里面会包含如下一些方法：</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rootId就是PPT(body&gt;div#impress)的id值，默认值自然就是impress了</span></span><br><span class="line">roots[ <span class="string">"impress-root-"</span> + rootId ] = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化。DOM结构上，Page(s)外面包裹了一个div</span></span><br><span class="line">    init: init,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转到某一个Page，参数有：el（Page节点），duration（切换动画的毫秒数）</span></span><br><span class="line">    goto: goto,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//next与prev，都是基于goto实现的</span></span><br><span class="line">    <span class="built_in">next</span>: <span class="built_in">next</span>,</span><br><span class="line">    <span class="built_in">prev</span>: <span class="built_in">prev</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>defaults对象，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var defaults = &#123;</span><br><span class="line">   width: <span class="number">1024</span>,</span><br><span class="line">   height: <span class="number">768</span>,</span><br><span class="line">   maxScale: <span class="number">1</span>,</span><br><span class="line">   minScale: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">   perspective: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">   transitionDuration: <span class="number">1000</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>还记得前面的computeWindowScale函数吗，这个函数的参数的默认值就是这个default（具体看下面代码），在实际运用中，该函数的参数取值为如下代码：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var rootData = root.dataset;</span><br><span class="line"><span class="component">config = &#123;</span><br><span class="line">    width: toNumber( rootData<span class="string">.width</span>, defaults<span class="string">.width</span> ),</span><br><span class="line">    height: toNumber( rootData<span class="string">.height</span>, defaults<span class="string">.height</span> ),</span><br><span class="line">    maxScale: toNumber( rootData<span class="string">.maxScale</span>, defaults<span class="string">.maxScale</span> ),</span><br><span class="line">    minScale: toNumber( rootData<span class="string">.minScale</span>, defaults<span class="string">.minScale</span> ),</span><br><span class="line">    perspective: toNumber( rootData<span class="string">.perspective</span>, defaults<span class="string">.perspective</span> ),</span><br><span class="line">    transitionDuration: toNumber( rootData<span class="string">.transitionDuration</span>, defaults<span class="string">.transitionDuration</span> )</span><br><span class="line">&#125;</span>;</span><br><span class="line">computeWindowScale(config);</span><br></pre></td></tr></table></figure>
<p>root就是div#impress节点，假设root节点为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">impress</span> <span class="attribute">data-perspective</span>=<span class="value">2000</span> <span class="attribute">data-width</span>=<span class="value">1400</span> <span class="attribute">data-height</span>=<span class="value">1000</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>那么root.dataset为：{perspective:2000, width: 1400, height: 1000}，所以可以通过更改#impress节点上的<strong>data-*</strong>属性来改变computeWindowScale函数的入参，<br>从而改变Page（单张演示文稿）占整个window视口的大小。</p>
<p>PPT的缩放比例transform:scale由computeWindowScale函数计算得出，得出的结果还要除以当前Page的data-scale属性（也就是Page的放大倍数），以确保每张Page在展现出来的时候，所占屏幕的宽/高都是一样的。</p>
</li>
</ul>
<h3 id="5_u3001_u4E8B_u4EF6_u5B9A_u4E49"><a href="#5_u3001_u4E8B_u4EF6_u5B9A_u4E49" class="headerlink" title="5、事件定义"></a>5、事件定义</h3><p>前面有很长一段内容都说的自定义事件，作者在代码中定义了一些事件：</p>
<ul>
<li>针对Page定义了两种事件：分别是：<code>impress:stepenter</code>，当新的Page展示出来之后触发，注意该事件触发时Page切换的动画已经结束</li>
<li>针对Page的另一个事件是：<code>impress:stepleave</code>，当Page准备离开时触发，此时动画刚刚开始</li>
<li>todo:未完待续…;</li>
</ul>
<h3 id="6_u3001init_u65B9_u6CD5_uFF1A"><a href="#6_u3001init_u65B9_u6CD5_uFF1A" class="headerlink" title="6、init方法："></a>6、init方法：</h3><ul>
<li><p>设置meta viewport，虽然在前面作者几乎排除了所有的移动端设备，但至少ipad还是可以的（屏幕又大，性能相对也比较好）</p>
</li>
<li><p>初始化config参数（前面有提到），然后根据config计算PPT的scale缩放倍数：<code>windowScale = computeWindowScale( config );</code>，使每张Page都呈现出来大小都是比较合适的。</p>
</li>
<li><p><strong>「重要」</strong>将所有Page的外面包裹一层div，该节点对应变量<code>canvas</code>，这层div使用CSS 3D所必须的（至少按我的了解是这样），你可以看看我的<a href="http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E6%AD%A3%E6%96%B9%E4%BD%93.html" target="_blank" rel="external">这个例子</a>，以及<a href="http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC.html" target="_blank" rel="external">这个</a>，还有<a href="http://tianyn1990.github.io/demos/canvas/html/css3-3d/css3-3d-demo-%E7%BF%BB%E4%B9%A6.html" target="_blank" rel="external">这个</a>，搭建一个完整的3D效果具体步骤如下（基本复述了前面原理部分讲过的内容）：</p>
<ul>
<li>最外层div（也就是#impress）声明视距（观察者的眼睛离屏幕的距离），也就是设置样式：transform:perspective(<strong><em>px) 或者 perspective:</em></strong>px；以及观察角度：perspective-origin</li>
<li>第二层div（就是代码中新增的那层div）设置：transform-style:preserve-3d（IE不支持），声明这是一个画布，当然你也可以同时声明多个画布，可以通过设置画布的transform 3d属性来控制整个画布的3d变换</li>
<li>第三层就可以写各种各样的3d模块了，它们都是按照以上的视距、观察角度来展示的</li>
</ul>
</li>
<li><p>为#impress和内部第二层div设置基础样式：（root为#impress，canvas为第二层div）</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var rootStyles = &#123;</span><br><span class="line">    position: <span class="string">"absolute"</span>,</span><br><span class="line">    transformOrigin: <span class="string">"top left"</span>,</span><br><span class="line">    transition: <span class="string">"all 0s ease-in-out"</span>,</span><br><span class="line">    transformStyle: <span class="string">"preserve-3d"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">css(root, rootStyles);</span><br><span class="line">css(root, &#123;</span><br><span class="line">    top: <span class="string">"50%"</span>,</span><br><span class="line">    left: <span class="string">"50%"</span>,</span><br><span class="line">    transform: <span class="built_in">perspective</span>( config.<span class="built_in">perspective</span>/windowScale ) + <span class="built_in">scale</span>( windowScale )</span><br><span class="line">&#125;);</span><br><span class="line">css(canvas, rootStyles);</span><br></pre></td></tr></table></figure>
<p>值得注意的是root的transform属性，为了保证视距在各个Page看起来都是一致的，所以在将PPT缩放scale倍的同时，也需要将perspective进行scale倍的缩放</p>
</li>
<li><p>初始化所有Page（.step）</p>
</li>
</ul>
<p>将Page上的属性（<code>&lt;div class=step data-x=100 data-y=-100 data-scale=4 ...&gt;</code>）存储到<code>stepsData</code>对象中，并根据Page上的属性，设置对应的样式：</p>
  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// get and init steps</span><br><span class="line"><span class="title">steps</span> = $$(<span class="string">".step"</span>, root);</span><br><span class="line"><span class="title">steps</span>.forEach( initStep );</span><br><span class="line"></span><br><span class="line">// `initStep` initializes given step element by reading <span class="typedef"><span class="keyword">data</span> from its</span></span><br><span class="line">// <span class="typedef"><span class="keyword">data</span> attributes and setting correct styles.</span></span><br><span class="line"><span class="title">var</span> initStep = function ( el, idx ) &#123;</span><br><span class="line">    var <span class="typedef"><span class="keyword">data</span> = el.dataset,</span></span><br><span class="line">        step = &#123;</span><br><span class="line">            translate: &#123;</span><br><span class="line">                x: toNumber(<span class="typedef"><span class="keyword">data</span>.x),</span></span><br><span class="line">                y: toNumber(<span class="typedef"><span class="keyword">data</span>.y),</span></span><br><span class="line">                z: toNumber(<span class="typedef"><span class="keyword">data</span>.z)</span></span><br><span class="line">            &#125;,</span><br><span class="line">            rotate: &#123;</span><br><span class="line">                x: toNumber(<span class="typedef"><span class="keyword">data</span>.rotateX),</span></span><br><span class="line">                y: toNumber(<span class="typedef"><span class="keyword">data</span>.rotateY),</span></span><br><span class="line">                z: toNumber(<span class="typedef"><span class="keyword">data</span>.rotateZ || <span class="keyword">data</span>.rotate)</span></span><br><span class="line">            &#125;,</span><br><span class="line">            scale: toNumber(<span class="typedef"><span class="keyword">data</span>.scale, 1),</span></span><br><span class="line">            el: el</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !el.id ) &#123;</span><br><span class="line">        el.id = <span class="string">"step-"</span> + (idx + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stepsData[<span class="string">"impress-"</span> + el.id] = step;</span><br><span class="line"></span><br><span class="line">    css(el, &#123;</span><br><span class="line">        position: <span class="string">"absolute"</span>,</span><br><span class="line">        transform: <span class="string">"translate(-50%,-50%)"</span> +</span><br><span class="line">                   translate(step.translate) +</span><br><span class="line">                   rotate(step.rotate) +</span><br><span class="line">                   scale(step.scale),</span><br><span class="line">        transformStyle: <span class="string">"preserve-3d"</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>初始化canvas的值<blockquote>
<p>canvas：#impress下一层div，它包裹着所有Pages</p>
</blockquote>
</li>
</ul>
<p>我们之所以能够看到3D环境中的每一个Page，就是要靠canvas通过各种transform 3d变换，来变换画布，使当前Page处于<strong>「正前方」</strong>，再由PPT上的perspective和scale属性来把「镜头」拉近到Page跟前。</p>
<p><strong>代码详细分析，未完待续…</strong></p>
<blockquote>
<p>by <a href="https://tianyn1990.github.io" target="_blank" rel="external">tianyn1990</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>在开始阅读本文之前，你至少应该打开官网的<a href="http://impress.github.io/impress.js" target="_blank" rel="external">例子</a>看看，并且<a href="https://github.com/s]]>
    </summary>
    
      <category term="impress" scheme="http://yoursite.com/tags/impress/"/>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何发表文章]]></title>
    <link href="http://yoursite.com/2015/12/23/%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2015/12/23/如何发布文章/</id>
    <published>2015-12-23T06:42:46.000Z</published>
    <updated>2015-12-23T06:42:46.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u51C6_u5907_u5DE5_u4F5C"><a href="#u51C6_u5907_u5DE5_u4F5C" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>安装<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo</a></li>
<li>clone <code>kaola-fed/kaola-fed.github.io</code>到本地<a href="https://github.com/kaola-fed/kaola-fed.github.io.git" target="_blank" rel="external">https://github.com/kaola-fed/kaola-fed.github.io.git</a></li>
</ol>
<h2 id="u5F00_u59CB_u53D1_u5E03"><a href="#u5F00_u59CB_u53D1_u5E03" class="headerlink" title="开始发布"></a>开始发布</h2><ol>
<li>在code目录下， 首先执行npm install安装依赖module，执行<code>hexo new 文章名称</code>，新建一篇文章；</li>
<li>在source/_post目录下，找到新建的文件，编辑好文章后，执行<code>hexo server</code>，运行本地博客服务，这时候可以打开<code>http://localhost:4000</code>就可以看到新增的内容了；</li>
<li>确认编辑好后，执行hexo generate生成静态文件，把生成的public下的静态文件拷贝到最外层文件中， 提交所有更改到master分支；</li>
<li>等待一段时间，wercker自动部署好后， 就可以在<code>http://kaola-fed.github.io</code>看到更新了；</li>
</ol>
<h2 id="Refs_3A"><a href="#Refs_3A" class="headerlink" title="Refs:"></a>Refs:</h2><ul>
<li><a href="http://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="external">使用GitHub + Hexo搭建博客</a></li>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo文档</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u51C6_u5907_u5DE5_u4F5C"><a href="#u51C6_u5907_u5DE5_u4F5C" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>安装<a href="https:/]]>
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS中的事件循环与定时器]]></title>
    <link href="http://yoursite.com/2015/12/23/JS%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <id>http://yoursite.com/2015/12/23/JS中的事件循环与定时器/</id>
    <published>2015-12-23T06:42:46.000Z</published>
    <updated>2015-12-23T06:42:46.000Z</updated>
    <content type="html"><![CDATA[<p><em>本文是在看过一些文章和视频之后，结合自己的理解，做的一个汇总，如果发现理解错误的地方，请及时指出便于更正。</em> <strong>Orz</strong></p>
<h3 id="u4E00_u3001_u5355_u7EBF_u7A0B"><a href="#u4E00_u3001_u5355_u7EBF_u7A0B" class="headerlink" title="一、单线程"></a>一、单线程</h3><p>javascript单线程执行，是由浏览器的场景决定的，避免了复杂的同步问题。HTML5提出「Web Worker」标准，允许js创建多个线程，但子线程仍受主线程控制，且不能操作DOM，js的本质未变。</p>
<h3 id="u4E8C_u3001_u4EFB_u52A1_u961F_u5217__26amp_3B__u4E8B_u4EF6_u5FAA_u73AF"><a href="#u4E8C_u3001_u4EFB_u52A1_u961F_u5217__26amp_3B__u4E8B_u4EF6_u5FAA_u73AF" class="headerlink" title="二、任务队列 &amp; 事件循环"></a>二、任务队列 &amp; 事件循环</h3><p><img src="../../../../uploads/images/taskqueue.png" alt="image"></p>
<ul>
<li><p>任务分为：<strong>同步任务（synchronous）</strong>、<strong>异步任务（asynchronous）</strong>；同步任务被放入<strong>主线程</strong>，异步任务放入<strong>任务队列（task queue）</strong>。任务队列中的异步任务一旦运行有了结果，那么会在任务队列中放置一个对应的事件，当主线程中的同步任务全部执行完毕以后，会检查任务队列，将包含对应事件的异步任务放入主线程，然后主线程会执行所有任务，执行完毕以后再次检查task queue。这样不断循环的过程就叫做<strong>「event loop」</strong>。（需要注意的是，loop的时间精度在4ms-16ms之间，oldIE会比较大，部分现代浏览器会判断pc是否外接电源来调整精确度）</p>
</li>
<li><p>task queue中的「事件」包括：IO设备（keypress,network events like ajax…）、鼠标点击、页面滚动等。事件被添加到主线程后，在下一个loop中执行的是该事件的「回调函数」，所以async task都有回调函数。</p>
</li>
<li><p>task queue是「先进先出」队列结构，首先注册的事件第一个进入主线程等待执行。但「定时器」功能还会校验该事件的时间，到达时间后的async task才进入主线程。</p>
</li>
</ul>
<p><img src="../../../../uploads/images/eventloop.png" alt="image"></p>
<ul>
<li>如上图，主线程的运行会产生<strong>「堆 heap」</strong>和<strong>「栈 stack」</strong>，<strong>「执行栈」</strong>（主线程）中的代码可能会通过调用「WebAPIs」在task queue中创建async task，得到结果的async task会将「回调函数」放入callback queue中，并把相应事件放入task queue中，当「执行栈」中的代码执行完毕，就会依次将task queue中所有符合时间要求（定时器）的事件放入「执行栈」中，并在下一个event loop中执行对应的「回调函数」。</li>
</ul>
<h3 id="u4E09_u3001_u5B9A_u65F6_u5668"><a href="#u4E09_u3001_u5B9A_u65F6_u5668" class="headerlink" title="三、定时器"></a>三、定时器</h3><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><ul>
<li><p>setTimeout 与 setInterval 实现原理一致，setTimeout(fn,0) 会将「事件」放入task queue的<strong>尾部</strong>，在<strong>下一次loop</strong>中，当「同步任务」与task queue中现有事件都执行完之后再执行。</p>
</li>
<li><p>setTimeout存在<strong>「时间精度问题」</strong>，至少在4ms以上，根据浏览器、设备是否插电源等有所不同，最多能达到近16ms。为了解决这个问题，加快响应速度，产生了<strong>「setImmediate API 与 setImmediate.js项目」</strong>与<strong>「requestAnimationFrame」</strong>，前者解决<strong>「触发之后，立即调用回调函数，希望延迟尽可能短」</strong>的情况，后者可以实现<strong>「流畅的JS动画」（见下文）</strong></p>
</li>
</ul>
<h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h3><ul>
<li><p>setInterval如果使用「固定步长」（间隔时间为定值），例如200ms，那么它可能会在距离js执行开始的205ms，405ms，605ms…时将「事件」放入task queue中的末尾等待执行。</p>
</li>
<li><h4 id="u95EE_u9898_u4E00_uFF1A"><a href="#u95EE_u9898_u4E00_uFF1A" class="headerlink" title="问题一："></a>问题一：</h4><p>如果主线程（或执行栈）中的任务与task queue中的其它任务再加上setInterval中的回调函数的总执行时间超过了「固定步长」（200ms），那么setInterval的回调函数就会「延后执行」，浏览器会保证<strong>「当任务队列中没有定时器的任何其它代码实例时，才将新的定时器添加到任务队列」</strong>，长时间运行就会产生大量「积压」在内存中待执行的函数，如果主线程终于空闲下来，那么就会立刻执行<strong>「积压」</strong>的大量函数，中间不会有任何停顿。那么真正的执行时间可能就变成了（假设主线程执行时间每loop固定为300ms）：305ms、605ms、605ms、905ms、1205ms、1205ms…就会产生<strong>「跳帧」</strong>。例子如下：（补充：<a href="https://developer.mozilla.org/zh-CN/docs/Code_snippets/Timers" target="_blank" rel="external">Date.now</a> IE9以上支持，相对new Date()来说减少创建一次对象的时间和内存）</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>, itv;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">btnclick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	itv = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'run:'</span>+i++);</span><br><span class="line">		<span class="keyword">var</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">		<span class="keyword">while</span>(<span class="built_in">Date</span>.now() - start &lt; <span class="number">2000</span>) &#123;&#125;</span><br><span class="line">	&#125;, <span class="number">500</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p><strong>但在试验中（ff，chrome，safari），只有firefox发生了「积压」效果</strong>，具体表现为：会有几个「run:i」同时打印到控制台。推测是webkit内核对这块做了优化。如果一定要使用setInterval的话，问题一（避免事件积压）的解决办法有（摘自『javascript高级程序设计』）：<br>(1) 间隔时间使用百分比: 开始值 + (目标值 - 开始值) * （Date.now() - 开始时间）/ 时间区间；<br>(2) 使用链式setTimeout；</p>
<ul>
<li><h4 id="u95EE_u9898_u4E8C_uFF1A"><a href="#u95EE_u9898_u4E8C_uFF1A" class="headerlink" title="问题二："></a>问题二：</h4><p><strong>「setTimeout同样有这个问题！」</strong>通过切换标签页等操作让页面在后台运行，循环仍在继续，只是「时间间隔变长」了而已。另外，当动画发生在页面viewport可视区域以外的时候，中断动画运行，才是性能更优的选择（raf就是如此）。</p>
</li>
<li><h4 id="u95EE_u9898_u4E09_uFF1A"><a href="#u95EE_u9898_u4E09_uFF1A" class="headerlink" title="问题三："></a>问题三：</h4><p>在使用setTimeout制作JS动画的时候，时间间隔是不好把握的，如果假设某浏览器的渲染速率为60Hz，那么就是16又2/3毫秒渲染一次，为了匹配这个速率，我们需要确保「setTimeout中设定的时间间隔」+「回调函数执行时间」+「在显示器上绘制/改变动画的下一帧的时间」刚好等于「16 2/3ms」，假设3者相加时间为15ms，那么每10『(16 2/3) / ((16 2/3)- 15)=10』帧会多出一帧来，那么结果就是在第10帧的时候，动画函数连续执行了两次，于是动画不再平滑了…（详见<a href="https://lists.webkit.org/pipermail/webkit-dev/2011-September/018095.html" target="_blank" rel="external">这篇啰嗦的文章</a>），更不要说还要考虑setTimeout的「时间精度」问题（4ms 一次 event loop，也即是最少4ms才检查一次setTimeout的时间是否达到）</p>
</li>
</ul>
<h3 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h3><ul>
<li><p>requestAnimationFrame 会把每一帧中的所有DOM操作集中起来，在<strong>「一次重绘或回流中就完成」</strong>，并且<strong>「重绘或回流的时间间隔紧紧跟随浏览器的刷新频率」</strong>，一般来说，这个频率为每秒60帧。</p>
</li>
<li><p>在隐藏或不可见的元素中，requestAnimationFrame将不会进行重绘或回流，这当然就意味着更少的的cpu，gpu和内存使用量。  </p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>, _load = +<span class="keyword">new</span> <span class="built_in">Date</span>(), loop = <span class="number">1000</span>/<span class="number">60</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(i++, (_now-_load)/loop);</span><br><span class="line">    _load = _now;</span><br><span class="line">    requestAnimationFrame(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>与setTimeout相比，requestAnimationFrame不是自己指定回调函数运行的时间，而是跟着浏览器内建的刷新频率来执行回调，这当然就能达到浏览器所能实现动画的最佳效果了。</p>
</li>
<li><p>但另外一方面，requestAnimationFrame的预期执行时间要比setTimeout要长，因为setTimeout的最小执行时间是由「第7点：浏览器的时间精度」决定的，但raf会跟随浏览器DOM的刷新频率来执行，理论为16 2/3ms。但是，<strong>在setTimeout中如果进行了DOM操作（尤其是产生了重绘）通常不会立即执行，而是等待浏览器内建刷新时才执行</strong>。因此对于「动画」来说的话，raf要远远比setTimeout适合得多。</p>
</li>
<li><p>rAF与setTimeout性能比较：（据某些人说，早期的raf性能堪忧，尤其是在手机上，反而不如setTimeout）<br><strong>macbook pro chrome 46.0.2490.86 (64-bit)：</strong><br>(1) setTimeout用时：37280ms<br>(2) raf用时：       18360ms  </p>
</li>
</ul>
<p><strong>setTimeout:</strong>  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> raf, i= <span class="number">1</span>, body = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</span><br><span class="line">body.innerHTML = <span class="string">'&lt;div id="sq" style="position:fixed;width:30px;height:30px;top:50px;left:50px;background:red;"&gt;&lt;/div&gt;'</span>;</span><br><span class="line"><span class="keyword">var</span> sq = <span class="built_in">document</span>.querySelector(<span class="string">"#sq"</span>);</span><br><span class="line"><span class="keyword">var</span> pause = <span class="number">10</span>;<span class="comment">//回调函数执行时间</span></span><br><span class="line"><span class="keyword">var</span> _load = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> t = <span class="number">1000</span>/<span class="number">60</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    i++;</span><br><span class="line">    sq.style.left = sq.offsetLeft + <span class="number">1</span> + <span class="string">'px'</span>;</span><br><span class="line">    <span class="keyword">var</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Date</span>.now() - start &lt; pause) &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Date</span>.now() - _load);</span><br><span class="line">    &#125;</span><br><span class="line">    raf = setTimeout(run1, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    clearTimeout(raf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//37280</span></span><br></pre></td></tr></table></figure>
<p><strong>rAF:</strong>  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> raf, i= <span class="number">1</span>, body = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</span><br><span class="line">body.innerHTML = <span class="string">'&lt;div id="sq" style="position:fixed;width:30px;height:30px;top:50px;left:50px;background:red;"&gt;&lt;/div&gt;'</span>;</span><br><span class="line"><span class="keyword">var</span> sq = <span class="built_in">document</span>.querySelector(<span class="string">"#sq"</span>);</span><br><span class="line"><span class="keyword">var</span> pause = <span class="number">10</span>;<span class="comment">//回调函数执行时间</span></span><br><span class="line"><span class="keyword">var</span> _load = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    i++;</span><br><span class="line">    sq.style.left = sq.offsetLeft + <span class="number">1</span> + <span class="string">'px'</span>;</span><br><span class="line">    <span class="keyword">var</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Date</span>.now() - start &lt; pause) &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Date</span>.now() - _load);</span><br><span class="line">    &#125;</span><br><span class="line">    raf = requestAnimationFrame(run);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    cancelAnimationFrame(raf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//18360</span></span><br></pre></td></tr></table></figure>
<ul>
<li>由于requestAnimationFrame的特性之一：会把每一帧中的所有DOM操作集中起来，在「一次重绘或回流中就完成」。因此有github项目fastdom，我会在另一篇文章中详细分析fastdom的实现思路与代码。</li>
</ul>
<h3 id="u56DB_u3001_u66F4_u5FEB_u7684_u5F02_u6B65_u6267_u884C"><a href="#u56DB_u3001_u66F4_u5FEB_u7684_u5F02_u6B65_u6267_u884C" class="headerlink" title="四、更快的异步执行"></a>四、更快的异步执行</h3><p><em>不是为了「动画」，而是单纯的希望最快速的执行异步回调：</em></p>
<h4 id="u4F7F_u7528_u5F02_u6B65_u51FD_u6570_uFF1AsetTimeout_u3001raf_u3001setImmediate_uFF1A"><a href="#u4F7F_u7528_u5F02_u6B65_u51FD_u6570_uFF1AsetTimeout_u3001raf_u3001setImmediate_uFF1A" class="headerlink" title="使用异步函数：setTimeout、raf、setImmediate："></a>使用异步函数：setTimeout、raf、setImmediate：</h4><ol>
<li>setTimeout会有「时间精度问题」，经过本地试验，chrome用时约1.5ms（连接电源）、safari用时约5ms、firefox用时约0.3ms（为何这么快…）</li>
<li>raf会跟随浏览器内置重绘页面的频率，约60Hz，理论上平均时间为：1000/60/2ms，chrome上测试：第一次时间多在1ms内，第二次调用时间大于10ms。</li>
<li>setImmediate：仅IE10支持，尚未成为标准。但nodeJS已经支持并推荐使用此方法。另外，github上有<a href="https://github.com/YuzuJS/setImmediate/blob/master/README.md" target="_blank" rel="external">setImmediate.js项目</a>，用其它方法实现了setImmediate功能</li>
</ol>
<p>测试：<br><strong>setTimeout:</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> performance ? performance.now() : +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> i = now();</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(now()-j);</span><br><span class="line">    &#125;,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> j = now();</span><br><span class="line">    <span class="built_in">console</span>.log(j-i);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p><strong>raf:</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> performance ? performance.now() : +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> i = now();</span><br><span class="line">requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(now()-j);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> j = now();</span><br><span class="line">    <span class="built_in">console</span>.log(j-i);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="u5176_u5B83_u65B9_u5F0F_u5B9E_u73B0_u5F02_u6B65_u8C03_u7528_uFF1A"><a href="#u5176_u5B83_u65B9_u5F0F_u5B9E_u73B0_u5F02_u6B65_u8C03_u7528_uFF1A" class="headerlink" title="其它方式实现异步调用："></a>其它方式实现异步调用：</h4><ul>
<li>onmessage：和iframe通信时常常会使用到onmessage方法，但是如果同一个window postMessage给自身，其实也相当于异步执行了一个function。  </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doSth = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, doSth, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">window</span>.postMessage(<span class="string">""</span>, <span class="string">"*"</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>另外，还可以利用script标签，实现函数异步执行（把script添加到文档也会执行onreadystatechange 但是该方法只能在IE下浏览器里使用），例如：  </li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newScript = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">newScript.onreadystatechange = doSth;</span><br><span class="line"><span class="built_in">document</span>.documentElement.appendChild(newScript);</span><br></pre></td></tr></table></figure>
<p>理论上，执行回调函数的等待时间排序：<br><strong>setImmediate &lt; readystatechange &lt; onmessage &lt; setTimeout 0 &lt; requestAnimationFrame</strong></p>
<ul>
<li>另外，在<strong>「<a href="https://github.com/YuzuJS/setImmediate/blob/master/README.md" target="_blank" rel="external">setImmediate.js项目</a>」</strong>中说了它的实现策略，对上文进行一个有力的补充：  </li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## The Tricks</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### `process.nextTick`</span></span><br><span class="line"></span><br><span class="line">In Node.js versions <span class="keyword">below</span> <span class="number">0.9</span>, `setImmediate` <span class="keyword">is</span> <span class="keyword">not</span> available, <span class="keyword">but</span> [`process.nextTick`][nextTick] <span class="keyword">is</span>—<span class="keyword">and</span> <span class="keyword">in</span> those versions, `process.nextTick` uses macrotask semantics. So, we use <span class="keyword">it</span> <span class="keyword">to</span> shim support <span class="keyword">for</span> a <span class="keyword">global</span> `setImmediate`.</span><br><span class="line"></span><br><span class="line">In Node.js <span class="number">0.9</span> <span class="keyword">and</span> <span class="keyword">above</span>, `process.nextTick` moved <span class="keyword">to</span> microtask semantics, <span class="keyword">but</span> `setImmediate` was introduced <span class="keyword">with</span> macrotask semantics, so there's no need <span class="keyword">to</span> polyfill anything.</span><br><span class="line"></span><br><span class="line">Note <span class="keyword">that</span> we check <span class="keyword">for</span> *actual* Node.js environments, <span class="keyword">not</span> emulated ones like those produced <span class="keyword">by</span> browserify <span class="keyword">or</span> similar. Such emulated environments often already include a `process.nextTick` shim <span class="keyword">that</span>'s <span class="keyword">not</span> <span class="keyword">as</span> browser-compatible <span class="keyword">as</span> setImmediate.js.</span><br><span class="line"></span><br><span class="line"><span class="comment">### `postMessage`</span></span><br><span class="line"></span><br><span class="line">In Firefox <span class="number">3</span>+, Internet Explorer <span class="number">9</span>+, all modern WebKit browsers, <span class="keyword">and</span> Opera <span class="number">9.5</span>+, [`postMessage`][postMessage] <span class="keyword">is</span> available <span class="keyword">and</span> provides a good way <span class="keyword">to</span> queue tasks <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> event loop. It's quite <span class="keyword">the</span> abuse, using a cross-document messaging protocol within <span class="keyword">the</span> same document simply <span class="keyword">to</span> <span class="keyword">get</span> access <span class="keyword">to</span> <span class="keyword">the</span> event loop task queue, <span class="keyword">but</span> <span class="keyword">until</span> there are native implementations, this <span class="keyword">is</span> <span class="keyword">the</span> best option.</span><br><span class="line"></span><br><span class="line">Note <span class="keyword">that</span> Internet Explorer <span class="number">8</span> includes a synchronous <span class="property">version</span> <span class="keyword">of</span> `postMessage`. We detect this, <span class="keyword">or</span> any other such synchronous implementation, <span class="keyword">and</span> fall <span class="keyword">back</span> <span class="keyword">to</span> another trick.</span><br><span class="line"></span><br><span class="line"><span class="comment">### `MessageChannel`</span></span><br><span class="line"></span><br><span class="line">Unfortunately, `postMessage` has completely different semantics inside web workers, <span class="keyword">and</span> so cannot be used there. So we turn <span class="keyword">to</span> [`MessageChannel`][MessageChannel], which has worse browser support, <span class="keyword">but</span> <span class="keyword">does</span> work inside a web worker.</span><br><span class="line"></span><br><span class="line"><span class="comment">### `&lt;script&gt; onreadystatechange`</span></span><br><span class="line"></span><br><span class="line">For our <span class="keyword">last</span> trick, we pull something out <span class="keyword">to</span> make things fast <span class="keyword">in</span> Internet Explorer versions <span class="number">6</span> <span class="keyword">through</span> <span class="number">8</span>: namely, creating a `&lt;<span class="keyword">script</span>&gt;` element <span class="keyword">and</span> firing our calls <span class="keyword">in</span> <span class="keyword">its</span> `onreadystatechange` event. This <span class="keyword">does</span> execute <span class="keyword">in</span> a future turn <span class="keyword">of</span> <span class="keyword">the</span> event loop, <span class="keyword">and</span> <span class="keyword">is</span> also faster than `setTimeout(…, <span class="number">0</span>)`, so hey, why <span class="keyword">not</span>?</span><br></pre></td></tr></table></figure>
<h3 id="setImmediate_API_uFF1A_u672A_u5B8C_u5F85_u7EED_u2026"><a href="#setImmediate_API_uFF1A_u672A_u5B8C_u5F85_u7EED_u2026" class="headerlink" title="setImmediate API：未完待续…"></a>setImmediate API：未完待续…</h3><h3 id="u90E8_u5206_u53C2_u8003_u8D44_u6599_uFF1A"><a href="#u90E8_u5206_u53C2_u8003_u8D44_u6599_uFF1A" class="headerlink" title="部分参考资料："></a>部分参考资料：</h3><ol>
<li><p>JavaScript 运行机制详解：再谈Event Loop<br><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/10/event-loop.html</a><br>—相关视频：Help, I’m stuck in an event-loop  <a href="https://vimeo.com/96425312" target="_blank" rel="external">https://vimeo.com/96425312</a></p>
</li>
<li><p>更快的异步执行<br><a href="http://www.alloyteam.com/2014/03/faster-asynchronous-execution/" target="_blank" rel="external">http://www.alloyteam.com/2014/03/faster-asynchronous-execution/</a></p>
</li>
<li><p>Enable REQUEST_ANIMATION_FRAME on all ports?<br><a href="https://lists.webkit.org/pipermail/webkit-dev/2011-September/018095.html" target="_blank" rel="external">https://lists.webkit.org/pipermail/webkit-dev/2011-September/018095.html</a></p>
</li>
<li><p>拥有更好性能的requesAnimationFrame<br><a href="http://sentsin.com/web/949.html" target="_blank" rel="external">http://sentsin.com/web/949.html</a></p>
</li>
<li><p>性能更好的js动画实现方式——requestAnimationFrame<br><a href="http://www.cnblogs.com/2050/p/3871517.html" target="_blank" rel="external">http://www.cnblogs.com/2050/p/3871517.html</a></p>
</li>
</ol>
<blockquote>
<p>by <a href="https://tianyn1990.github.io" target="_blank" rel="external">tianyn1990</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>本文是在看过一些文章和视频之后，结合自己的理解，做的一个汇总，如果发现理解错误的地方，请及时指出便于更正。</em> <strong>Orz</strong></p>
<h3 id="u4E00_u3001_u5355_u7EBF_u7A0B"><a href="#]]>
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
